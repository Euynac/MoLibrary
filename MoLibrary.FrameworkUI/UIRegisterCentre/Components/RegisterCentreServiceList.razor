@using Microsoft.Extensions.Options
@using MoLibrary.RegisterCentre
@using MoLibrary.RegisterCentre.Models
@using MoLibrary.RegisterCentre.Modules
@using MoLibrary.FrameworkUI.Modules
@using MoLibrary.RegisterCentre.Interfaces
@using MoLibrary.UI.Components.ContextMenu
@inject IOptionsSnapshot<ModuleRegisterCentreOption> RegisterCentreOptions
@inject IOptionsSnapshot<ModuleRegisterCentreUIOption> RegisterCentreUIOptions
@inject IDialogService DialogService

<div>
    <MudDataGrid T="RegisteredServiceStatus" Items="@Services" Hover="true" Dense="true" Loading="@IsLoading" 
                 RowContextMenuClick="OnRowContextMenuClick">
	<Columns>
		<PropertyColumn Property="x => x.AppId" Title="App ID" />
		<PropertyColumn Property="x => x.AppName" Title="服务名称" />
		<PropertyColumn Property="x => x.DomainName" Title="领域" />
		<PropertyColumn Property="x => x.ProjectName" Title="项目名" />
		<TemplateColumn Title="实例数">
			<CellTemplate>
				<MudText>@($"{context.Item.RunningInstanceCount}/{context.Item.TotalInstanceCount}")</MudText>
			</CellTemplate>
		</TemplateColumn>
		<TemplateColumn Title="整体状态">
			<CellTemplate>
				@{
					var status = context.Item.OverallStatus;
					Color statusColor;
					string statusText;
					string statusIcon;

					switch (status)
					{
						case ServiceStatus.Running:
							statusColor = Color.Success;
							statusText = "运行中";
							statusIcon = Icons.Material.Filled.CheckCircle;
							break;
						case ServiceStatus.Updating:
							statusColor = Color.Info;
							statusText = "更新中";
							statusIcon = Icons.Material.Filled.Update;
							break;
						case ServiceStatus.Offline:
							statusColor = Color.Default;
							statusText = "离线";
							statusIcon = Icons.Material.Filled.CloudOff;
							break;
						case ServiceStatus.Error:
							statusColor = Color.Error;
							statusText = "异常";
							statusIcon = Icons.Material.Filled.Error;
							break;
						default:
							statusColor = Color.Default;
							statusText = "未知";
							statusIcon = Icons.Material.Filled.Help;
							break;
					}
				}
				<MudChip T="string" Color="@statusColor" Size="Size.Small" Icon="@statusIcon">
					@statusText
				</MudChip>
			</CellTemplate>
		</TemplateColumn>
		<TemplateColumn Title="程序集版本">
			<CellTemplate>
				@{
					var runningInstance = context.Item.GetRunningInstanceInfo();
				}
				<MudText Typo="Typo.body2">
					@(runningInstance?.RegisterInfo.AssemblyVersion ?? "N/A")
				</MudText>
			</CellTemplate>
		</TemplateColumn>
		<TemplateColumn Title="构建时间">
			<CellTemplate>
				@{
					var runningInstance = context.Item.GetRunningInstanceInfo();
				}
				<MudTooltip Text="@(runningInstance?.RegisterInfo.BuildTime.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A")">
					<MudText Typo="Typo.body2">
						@(runningInstance?.RegisterInfo.BuildTime.ToString("MM-dd HH:mm") ?? "N/A")
					</MudText>
				</MudTooltip>
			</CellTemplate>
		</TemplateColumn>
		@foreach (var metadataKey in GetDisplayMetadataKeys())
		{
			<TemplateColumn Title="@metadataKey">
				<CellTemplate>
					@{
						var runningInstance = context.Item.GetRunningInstanceInfo();
						var metadataValue = runningInstance?.RegisterInfo.Metadata.GetValueOrDefault(metadataKey) ?? "N/A";
					}
					<MetadataValueDisplay Value="@metadataValue" IsCompactMode="true" />
				</CellTemplate>
			</TemplateColumn>
		}
		<TemplateColumn Title="最后心跳">
			<CellTemplate>
				@{
					var runningInstance = context.Item.GetRunningInstanceInfo();
				}
				<MudTooltip Text="@(runningInstance?.LastHeartbeatTime.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A")">
					<MudText Typo="Typo.body2">
						@(runningInstance?.LastHeartbeatTime.ToString("MM-dd HH:mm:ss") ?? "N/A")
					</MudText>
				</MudTooltip>
			</CellTemplate>
		</TemplateColumn>
		<TemplateColumn Title="实例状态">
			<CellTemplate>
				<MudStack Row="true" Spacing="1">
					@foreach (var instance in context.Item.Instances.Values.Take(3))
					{
						var instanceColor = instance.Status switch
						{
							ServiceStatus.Running => Color.Success,
							ServiceStatus.Updating => Color.Info,
							ServiceStatus.Offline => Color.Default,
							ServiceStatus.Error => Color.Error,
							_ => Color.Default
						};
						<MudTooltip Text="@($"{instance.InstanceId}: {instance.Status}")">
							<MudIcon Icon="@Icons.Material.Filled.Circle" Color="@instanceColor" Size="Size.Small" />
						</MudTooltip>
					}
					@if (context.Item.Instances.Count > 3)
					{
						<MudText Typo="Typo.caption">+@(context.Item.Instances.Count - 3)</MudText>
					}
				</MudStack>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
    </MudDataGrid>
    
    <!-- 右键菜单 -->
    <MoContextMenu TItem="RegisteredServiceStatus"
                   Items="@_contextMenuItems"
                   Visible="@_isContextMenuVisible"
                   InitialX="@_contextMenuX"
                   InitialY="@_contextMenuY"
                   ContextItem="@_contextMenuItem"
                   OnItemClick="@OnContextMenuItemClick"
                   OnClose="@CloseContextMenu" />
</div>


@code {
	[Parameter] public List<RegisteredServiceStatus> Services { get; set; } = [];
	[Parameter] public EventCallback OnRefresh { get; set; }
	[Parameter] public bool IsLoading { get; set; } = false;

	// 右键菜单状态
	private bool _isContextMenuVisible = false;
	private double _contextMenuX = 0;
	private double _contextMenuY = 0;
	private RegisteredServiceStatus? _contextMenuItem;
	private List<ContextMenuItem<RegisteredServiceStatus>> _contextMenuItems = [];

	private Task OnRowContextMenuClick(DataGridRowClickEventArgs<RegisteredServiceStatus> args)
	{
		// 生成菜单项
		_contextMenuItems = GetContextMenuItems(args.Item);
		_contextMenuItem = args.Item;
		_contextMenuX = args.MouseEventArgs.ClientX;
		_contextMenuY = args.MouseEventArgs.ClientY;
		_isContextMenuVisible = true;
		
		StateHasChanged();
		return Task.CompletedTask;
	}
	
	private Task OnContextMenuItemClick(ContextMenuItem<RegisteredServiceStatus> item)
	{
		// 菜单项点击后菜单会自动关闭
		return Task.CompletedTask;
	}
	
	private Task CloseContextMenu()
	{
		_isContextMenuVisible = false;
		_contextMenuItem = null;
		StateHasChanged();
		return Task.CompletedTask;
	}

	private List<ContextMenuItem<RegisteredServiceStatus>> GetContextMenuItems(RegisteredServiceStatus service)
	{
		return ContextMenuBuilder<RegisteredServiceStatus>.Create()
			.AddItem("查看详情", Icons.Material.Filled.Info, async (item) =>
			{
				if (item != null)
					await ShowServiceDetailAsync(item);
			}, "Enter")
			.AddSubMenu("管理操作", Icons.Material.Filled.Settings, subMenu =>
			{
				subMenu.AddItem("重启服务", Icons.Material.Filled.Refresh)
				       .AddItem("停止服务", Icons.Material.Filled.Stop)
				       .AddDivider()
				       .AddItem("查看日志", Icons.Material.Filled.Article);
			})
			.AddItem("复制服务ID", Icons.Material.Filled.ContentCopy, async (item) =>
			{
				if (item != null)
				{
					// 这里可以实现复制到剪贴板的功能
					// 暂时只是示例
					await Task.CompletedTask;
				}
			}, "Ctrl+C")
			.AddDivider()
			.AddItem("刷新列表", Icons.Material.Filled.Refresh, async (item) =>
			{
				await OnRefresh.InvokeAsync();
			}, "F5")
			.AddSubMenu("导出", Icons.Material.Filled.Download, exportMenu =>
			{
				exportMenu.AddItem("导出为JSON", Icons.Material.Filled.Code)
				         .AddItem("导出为CSV", Icons.Material.Filled.TableChart)
				         .AddItem("导出为Excel", Icons.Material.Filled.GridOn);
			})
			.Build();
	}

	private async Task ShowServiceDetailAsync(RegisteredServiceStatus service)
	{
		var parameters = new DialogParameters<RegisterCentreServiceDetailDialog>
        {
            { x => x.Service, service }
        };

		var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.Large,
            FullWidth = true
        };

		await DialogService.ShowAsync<RegisterCentreServiceDetailDialog>("服务详情", parameters, options);
	}

	private List<string> GetDisplayMetadataKeys()
	{
		// 创建新的列表，避免修改原始配置
		var configuredKeys = new List<string>(RegisterCentreUIOptions.Value.DisplayMetadataKeys);
		if (!RegisterCentreUIOptions.Value.DisableListeningAddressDisplay)
		{
			configuredKeys.Add(IRegisterCentreClient.ListeningAddressMetadataKey);
		}

        if (!configuredKeys.Any())
            return [];

        // 检查是否有任何服务包含配置的元数据键
        var hasMetadata = Services.Any(service =>
        {
            var runningInstance = service.GetRunningInstanceInfo();
            return runningInstance?.RegisterInfo.Metadata != null &&
                   configuredKeys.Any(key => runningInstance.RegisterInfo.Metadata.ContainsKey(key));
        });

        return hasMetadata ? configuredKeys : [];
    }
}