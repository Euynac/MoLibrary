@using Microsoft.Extensions.Options
@using MoLibrary.RegisterCentre
@using MoLibrary.RegisterCentre.Models
@using MoLibrary.RegisterCentre.Modules
@inject IOptionsSnapshot<ModuleRegisterCentreOption> RegisterCentreOptions
@inject IDialogService DialogService

<MudDataGrid T="RegisterServiceStatus" Items="@Services" Hover="true" Dense="true" RowClick="OnRowClick" Loading="@IsLoading">
    <Columns>
        <PropertyColumn Property="x => x.AppId" Title="App ID" />
        <PropertyColumn Property="x => x.Name" Title="服务名称" />
        <PropertyColumn Property="x => x.DomainName" Title="领域" />
        <PropertyColumn Property="x => x.ProjectName" Title="项目名" />
        <PropertyColumn Property="x => x.UpdateTime" Title="更新时间" Format="yyyy-MM-dd HH:mm:ss" />
        <PropertyColumn Property="x => x.BuildTime" Title="构建时间" Format="yyyy-MM-dd HH:mm:ss" />
        <PropertyColumn Property="x => x.AssemblyVersion" Title="程序集版本" />
        <PropertyColumn Property="x => x.ReleaseVersion" Title="发布版本" />
        <TemplateColumn Title="状态" CellClass="d-flex justify-end">
            <CellTemplate>
                @{
                    var timeSinceUpdate = DateTime.Now - context.Item.UpdateTime;
                    var heartbeatDuration = RegisterCentreOptions.Value.HeartbeatDuration;
                    var heartbeatSeconds = heartbeatDuration / 1000.0;
                    
                    Color statusColor;
                    string statusText;
                    
                    if (timeSinceUpdate.TotalSeconds < heartbeatSeconds * 2)
                    {
                        statusColor = Color.Success;
                        statusText = "在线";
                    }
                    else if (timeSinceUpdate.TotalSeconds < heartbeatSeconds * 3)
                    {
                        statusColor = Color.Warning;
                        statusText = "不健康";
                    }
                    else
                    {
                        statusColor = Color.Error;
                        statusText = "异常";
                    }
                }
                <MudChip T="string" Color="@statusColor" Size="Size.Small">
                    @statusText
                </MudChip>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary" 
                               OnClick="@(() => ShowServiceDetail(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {
    [Parameter] public List<RegisterServiceStatus> Services { get; set; } = new();
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private void OnRowClick(DataGridRowClickEventArgs<RegisterServiceStatus> args)
    {
        ShowServiceDetail(args.Item);
    }

    private async void ShowServiceDetail(RegisterServiceStatus service)
    {
        var parameters = new DialogParameters<RegisterCentreServiceDetailDialog>
        {
            { x => x.Service, service }
        };
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        await DialogService.ShowAsync<RegisterCentreServiceDetailDialog>("服务详情", parameters, options);
    }
}