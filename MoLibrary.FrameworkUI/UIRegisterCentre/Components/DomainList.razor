@using MoLibrary.FrameworkUI.UIRegisterCentre.Services
@using MoLibrary.RegisterCentre.Interfaces
@using MoLibrary.RegisterCentre.Models
@using MoLibrary.Tool.MoResponse
@inject RegisterCentreService RegisterCentreService
@inject ISnackbar Snackbar

<MudStack Spacing="4">
    <MudPaper Class="pa-4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">子域列表</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshDomainsAsync" Disabled="@_isLoading">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-1" />
                刷新
            </MudButton>
        </MudStack>
    </MudPaper>

    @if (_isLoading)
    {
        <MudPaper Class="pa-4">
            <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">正在加载域信息...</MudText>
        </MudPaper>
    }
    else if (!_domains.Any())
    {
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">
                暂无域信息
            </MudText>
        </MudPaper>
    }
    else
    {
        <MudGrid>
            @foreach (var domain in _domains)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="4" Class="cursor-pointer domain-card" @onclick="() => HandleDomainClick(domain)" Style="@GetDomainCardStyle(domain.Name)">
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6" Style="color: var(--mud-palette-text-primary); font-weight: bold;">
                                        @(domain.DisplayName ?? domain.Name)
                                    </MudText>
                                    <MudStack AlignItems="AlignItems.End" Spacing="1">
                                        <MudChip T="string" Size="Size.Small" Color="Color.Surface" Text="@GetOwnedServiceCount(domain.Name)" />
                                        @if (GetRelatedServiceCount(domain.Name) > 0)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Text="@GetRelatedServiceCountText(domain.Name)" />
                                        }
                                    </MudStack>
                                </MudStack>
                                
                                @if (!string.IsNullOrEmpty(domain.Description))
                                {
                                    <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-primary);">
                                        @domain.Description
                                    </MudText>
                                }
                                
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-primary); opacity: 0.7;">
                                        域名: @domain.Name
                                    </MudText>
                                    @{
                                        var ownedCount = GetOwnedServiceCount(domain.Name);
                                        var relatedCount = GetRelatedServiceCount(domain.Name);
                                    }
                                    <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-primary); opacity: 0.8;">
                                        本域服务: @ownedCount.Replace(" 个服务", "个")
                                        @if (relatedCount > 0)
                                        {
                                            <span> • 被依赖: @(relatedCount)个</span>
                                        }
                                    </MudText>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

<style>
    .domain-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .domain-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--mud-elevation-8) !important;
    }
    
    .cursor-pointer {
        cursor: pointer;
    }
</style>

@code {
    [Parameter] public EventCallback<DomainInfo> OnDomainSelected { get; set; }
    
    private bool _isLoading = false;
    private List<DomainInfo> _domains = [];
    private List<RegisteredServiceStatus> _allServices = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshDomainsAsync();
        }
    }

    private async Task RefreshDomainsAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var domainsResult = await RegisterCentreService.GetDomainsWithColorsAsync();
            if (domainsResult.IsFailed(out var error, out var domains))
            {
                Snackbar.Add($"获取域列表失败: {error.Message}", Severity.Error);
                _domains = [];
            }
            else
            {
                _domains = domains ?? [];
            }

            var servicesResult = await RegisterCentreService.GetMergedServicesStatusAsync();
            if (!servicesResult.IsFailed(out _, out var services))
            {
                _allServices = services ?? [];
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"刷新域列表失败: {ex.Message}", Severity.Error);
            _domains = [];
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetDomainCardStyle(string domainName)
    {
        var color = RegisterCentreService.GetDomainColor(domainName);
        return $"background: linear-gradient(135deg, {color} 0%, {color}dd 100%); border: none;";
    }

    private string GetOwnedServiceCount(string domainName)
    {
        var count = _allServices.Count(s => 
            string.Equals(s.DomainName, domainName, StringComparison.OrdinalIgnoreCase));
        return $"{count} 个服务";
    }
    
    private int GetRelatedServiceCount(string domainName)
    {
        return _allServices.Count(s => 
            !string.Equals(s.DomainName, domainName, StringComparison.OrdinalIgnoreCase) &&
            (s.DependentSubDomains?.Contains(domainName, StringComparer.OrdinalIgnoreCase) == true));
    }
    
    private string GetRelatedServiceCountText(string domainName)
    {
        var count = GetRelatedServiceCount(domainName);
        return $"+{count} 依赖";
    }

    private async Task HandleDomainClick(DomainInfo domain)
    {
        await OnDomainSelected.InvokeAsync(domain);
    }
}