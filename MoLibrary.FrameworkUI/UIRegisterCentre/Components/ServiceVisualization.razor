@using Microsoft.Extensions.DependencyInjection
@using MoLibrary.RegisterCentre.Interfaces
@using MoLibrary.RegisterCentre.Models
@using MoLibrary.FrameworkUI.UIRegisterCentre.Services
@using MoLibrary.FrameworkUI.UIRegisterCentre.Models
@using MoLibrary.Tool.MoResponse
@using Microsoft.JSInterop
@using MoLibrary.UI.Components.ContextMenu
@inject RegisterCentreService RegisterCentreService
@inject IServiceProvider ServiceProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">微服务架构图</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudTooltip Text="刷新数据">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                               Color="Color.Primary"
                               OnClick="LoadServiceDataAsync"
                               Disabled="@_loading" />
            </MudTooltip>
            <MudTooltip Text="重置视图">
                <MudIconButton Icon="@Icons.Material.Filled.RestartAlt"
                               Color="Color.Secondary"
                               OnClick="ResetView"
                               Disabled="@_loading" />
            </MudTooltip>
            <MudTooltip Text="布局设置">
                <MudIconButton Icon="@Icons.Material.Filled.Dashboard"
                               Color="Color.Info"
                               OnClick="ToggleLayoutPanel" />
            </MudTooltip>
            <MudTooltip Text="筛选设置">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt"
                               Color="Color.Tertiary"
                               OnClick="ToggleFilterPanel" />
            </MudTooltip>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (_showLayoutPanel)
        {
            <ServiceLayoutPanel CurrentLayout="_currentLayout"
                                ForceDistance="_forceDistance"
                                ForceStrength="_forceStrength"
                                CurrentLayoutChanged="OnLayoutChanged"
                                ForceDistanceChanged="OnForceDistanceChanged"
                                ForceStrengthChanged="OnForceStrengthChanged" />
        }
        
        @if (_showFilterPanel)
        {
            <ServiceFilterPanel @bind-FilterText="_filterText"
                                @bind-SelectedStatuses="_selectedStatuses"
                                @bind-SelectedDomains="_selectedDomains"
                                @bind-ShowOnlyWithInstances="_showOnlyWithInstances"
                                OnFiltersChanged="ApplyFilters"
                                AllServices="_allServices" />
        }

        <MudPaper Class="visualization-container" Style="position: relative; height: 600px; overflow: hidden;">
            @if (_loading)
            {
                <MudOverlay Visible="true" DarkBackground="false" Absolute="true">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                </MudOverlay>
            }
            <div id="service-graph" style="width: 100%; height: 100%;" @onclick="OnBackgroundClick" @oncontextmenu:preventDefault="true"></div>
        </MudPaper>
        
        <MudPaper Class="mt-4 pa-2" Elevation="0" Outlined="true">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.caption">
                        显示 @_filteredServices.Count / @_allServices.Count 个微服务
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="d-flex justify-end flex-wrap">
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircle" 
                             Color="Color.Success" Class="mr-1 mb-1">运行中</MudChip>
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Update" 
                             Color="Color.Info" Class="mr-1 mb-1">更新中</MudChip>
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.CloudOff" 
                             Color="Color.Default" Class="mr-1 mb-1">离线</MudChip>
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Error" 
                             Color="Color.Error" Class="mr-1 mb-1">异常</MudChip>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>

@* 右键菜单 *@
<MoContextMenu TItem="RegisteredServiceStatus" 
               Items="@_contextMenuItems" 
               Visible="@_contextMenuOpen"
               InitialX="@_contextMenuX" 
               InitialY="@_contextMenuY"
               ContextItem="@_contextMenuService"
               OnItemClick="@OnContextMenuItemClick"
               OnClose="@CloseContextMenu" />

@code {
    [Parameter] public EventCallback<RegisteredServiceStatus> OnServiceClick { get; set; }
    
    private IJSObjectReference? _jsModule;
    private List<RegisteredServiceStatus> _allServices = new();
    private List<RegisteredServiceStatus> _filteredServices = new();
    private Dictionary<string, string> _domainColors = new();
    private bool _loading = false;
    private bool _showOfflineServices = true;
    
    // 筛选相关字段
    private bool _showFilterPanel = false;
    private bool _showLayoutPanel = false;
    private string _filterText = string.Empty;
    private IReadOnlyCollection<ServiceStatus> _selectedStatuses = new HashSet<ServiceStatus>();
    private IReadOnlyCollection<string> _selectedDomains = new HashSet<string>();
    private bool _showOnlyWithInstances = false;
    
    // 布局相关字段
    private ServiceLayoutType _currentLayout = ServiceLayoutType.Force;
    private int _forceDistance = 150;
    private int _forceStrength = -500;
    
    // 右键菜单相关字段
    private bool _contextMenuOpen = false;
    private double _contextMenuX = 0;
    private double _contextMenuY = 0;
    private RegisteredServiceStatus? _contextMenuService;
    private List<ContextMenuItem<RegisteredServiceStatus>> _contextMenuItems = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", 
                "./_content/MoLibrary.FrameworkUI/UIRegisterCentre/serviceGraph.js");
            
            await InitializeGraph();
            await LoadServiceDataAsync();
        }
    }

    private async Task InitializeGraph()
    {
        if (_jsModule != null)
        {
            var isDarkMode = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.documentElement.classList.contains('dark')");
            
            await _jsModule.InvokeVoidAsync("initializeGraph", "service-graph", isDarkMode,
                DotNetObjectReference.Create(this));
        }
    }

    private async Task LoadServiceDataAsync()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            // 获取合并的服务状态
            if (!(await RegisterCentreService.GetMergedServicesStatusAsync()).IsFailed(out var error, out var services))
            {
                _allServices = services ?? new List<RegisteredServiceStatus>();
                
                // 初始化筛选状态
                InitializeFilters();
                
                // 获取域信息并分配颜色
                await AssignDomainColors();
                
                // 应用过滤
                await ApplyFilters();
            }
            else
            {
                Snackbar.Add($"加载服务数据失败: {error.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载服务数据异常: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task AssignDomainColors()
    {
        try
        {
            // 使用RegisterCentreService获取域信息和颜色分配
            if (!(await RegisterCentreService.GetDomainsWithColorsAsync()).IsFailed(out var error, out _))
            {
                // 获取统一的颜色映射
                _domainColors = RegisterCentreService.GetAllDomainColors();
            }
            else
            {
                Snackbar.Add($"获取域颜色信息失败: {error.Message}", Severity.Warning);
                // 使用空的颜色映射，后续会使用默认颜色
                _domainColors = new Dictionary<string, string>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"分配域颜色时发生异常: {ex.Message}", Severity.Warning);
            _domainColors = new Dictionary<string, string>();
        }
    }

    private void InitializeFilters()
    {
        // 初始化选择的状态
        if (!_selectedStatuses.Any())
        {
            _selectedStatuses = new HashSet<ServiceStatus>(
                Enum.GetValues<ServiceStatus>()
            );
        }
        
        // 初始化选择的域
        if (!_selectedDomains.Any())
        {
            var allDomains = _allServices.Select(s => s.DomainName ?? "未知").Distinct().ToList();
            _selectedDomains = new HashSet<string>(allDomains);
        }
    }
    
    private void ToggleFilterPanel()
    {
        _showFilterPanel = !_showFilterPanel;
        if (_showFilterPanel) _showLayoutPanel = false;
    }
    
    private void ToggleLayoutPanel()
    {
        _showLayoutPanel = !_showLayoutPanel;
        if (_showLayoutPanel) _showFilterPanel = false;
    }

    private async Task ApplyFilters()
    {
        _filteredServices = _allServices.Where(service =>
        {
            // 状态筛选
            if (!_selectedStatuses.Contains(service.OverallStatus))
                return false;
                
            // 域筛选
            var serviceDomain = service.DomainName ?? "未知";
            if (!_selectedDomains.Contains(serviceDomain))
                return false;
                
            // 文本筛选
            if (!string.IsNullOrWhiteSpace(_filterText))
            {
                var matchesText = service.AppName.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                                  service.AppId.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                                  (!string.IsNullOrEmpty(service.ProjectName) && service.ProjectName.Contains(_filterText, StringComparison.OrdinalIgnoreCase)) ||
                                  serviceDomain.Contains(_filterText, StringComparison.OrdinalIgnoreCase);
                
                if (!matchesText)
                    return false;
            }
            
            // 实例筛选
            if (_showOnlyWithInstances && service.TotalInstanceCount == 0)
                return false;
            
            // 兼容原有的离线服务筛选
            if (!_showOfflineServices && service.OverallStatus == ServiceStatus.Offline)
                return false;
            
            return true;
        }).ToList();
        
        await UpdateGraph();
    }

    private async Task UpdateGraph()
    {
        if (_jsModule != null)
        {
            var graphData = PrepareGraphData();
            await _jsModule.InvokeVoidAsync("updateGraph", graphData);
            
            // 应用当前布局设置
            await SetLayout(_currentLayout);
            if (_currentLayout == ServiceLayoutType.Force)
            {
                await _jsModule.InvokeVoidAsync("setForceDistance", _forceDistance);
                await _jsModule.InvokeVoidAsync("setForceStrength", _forceStrength);
            }
        }
    }
    
    private async Task SetLayout(ServiceLayoutType layoutType)
    {
        _currentLayout = layoutType;
        if (_jsModule != null)
        {
            var layoutName = layoutType switch
            {
                ServiceLayoutType.Force => "force",
                ServiceLayoutType.Hierarchy => "hierarchy", 
                ServiceLayoutType.Circular => "circular",
                ServiceLayoutType.Grid => "grid",
                _ => "force"
            };
            await _jsModule.InvokeVoidAsync("setLayout", layoutName);
        }
    }
    
    private async Task OnLayoutChanged(ServiceLayoutType layoutType)
    {
        await SetLayout(layoutType);
    }
    
    private async Task OnForceDistanceChanged(int value)
    {
        _forceDistance = value;
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("setForceDistance", value);
        }
    }
    
    private async Task OnForceStrengthChanged(int value)
    {
        _forceStrength = value;
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("setForceStrength", value);
        }
    }

    private object PrepareGraphData()
    {
        var nodes = _filteredServices.Select(service => new
        {
            id = service.AppId,
            name = service.AppName,
            domain = service.DomainName ?? "未知",
            project = service.ProjectName,
            status = service.OverallStatus.ToString(),
            runningInstances = service.RunningInstanceCount,
            totalInstances = service.TotalInstanceCount,
            color = RegisterCentreService.GetDomainColor(service.DomainName ?? "未知"),
            // 获取运行实例的详细信息
            instanceInfo = service.GetRunningInstanceInfo()
        }).ToList();

        // 暂时不构建服务间的依赖关系，因为当前模型中没有这个信息
        var links = new List<object>();

        return new { nodes, links };
    }

    [JSInvokable]
    public async Task OnNodeClick(string nodeId)
    {
        var service = _allServices.FirstOrDefault(s => s.AppId == nodeId);
        if (service != null && OnServiceClick.HasDelegate)
        {
            await OnServiceClick.InvokeAsync(service);
        }
    }
    
    [JSInvokable]
    public void OnNodeRightClick(string nodeId, double x, double y)
    {
        _contextMenuService = _allServices.FirstOrDefault(s => s.AppId == nodeId);
        if (_contextMenuService != null)
        {
            _contextMenuX = x;
            _contextMenuY = y;
            _contextMenuItems = BuildContextMenuItems(_contextMenuService);
            _contextMenuOpen = true;
            StateHasChanged();
        }
    }
    
    private void OnBackgroundClick()
    {
        if (_contextMenuOpen)
        {
            _contextMenuOpen = false;
            StateHasChanged();
        }
    }
    
    [JSInvokable]
    public void OnSvgBackgroundClick()
    {
        if (_contextMenuOpen)
        {
            _contextMenuOpen = false;
            StateHasChanged();
        }
    }
    
    private void CloseContextMenu()
    {
        _contextMenuOpen = false;
    }
    
    private List<ContextMenuItem<RegisteredServiceStatus>> BuildContextMenuItems(RegisteredServiceStatus service)
    {
        var builder = ContextMenuBuilder<RegisteredServiceStatus>.Create()
            .AddItem("查看服务详情", Icons.Material.Filled.Info, ViewServiceDetailsAsync)
            .AddItem("聚焦此服务", Icons.Material.Filled.CenterFocusStrong, FocusOnServiceAsync)
            .AddDivider()
            .AddItem("筛选同状态", Icons.Material.Filled.FilterAlt, FilterByStatusAsync)
            .AddItem("筛选同域", Icons.Material.Filled.Domain, FilterByDomainAsync)
            .AddItemIf(!string.IsNullOrEmpty(service.ProjectName), "筛选同项目", Icons.Material.Filled.Folder, FilterByProjectAsync)
            .AddItem("清除所有筛选", Icons.Material.Filled.ClearAll, ClearAllFiltersAsync)
            .AddDivider()
            .AddItem("复制服务ID", Icons.Material.Filled.ContentCopy, CopyServiceIdAsync)
            .AddItem("复制服务名", Icons.Material.Filled.ContentCopy, CopyServiceNameAsync);
        
        return builder.Build();
    }
    
    private async Task OnContextMenuItemClick(ContextMenuItem<RegisteredServiceStatus> item)
    {
        _contextMenuOpen = false;
        StateHasChanged();
    }
    
    private async Task ViewServiceDetailsAsync(RegisteredServiceStatus? service)
    {
        if (service != null && OnServiceClick.HasDelegate)
        {
            await OnServiceClick.InvokeAsync(service);
        }
    }
    
    private async Task FocusOnServiceAsync(RegisteredServiceStatus? service)
    {
        if (_jsModule != null && service != null)
        {
            await _jsModule.InvokeVoidAsync("focusOnNode", service.AppId);
        }
    }
    
    private async Task FilterByStatusAsync(RegisteredServiceStatus? service)
    {
        if (service != null)
        {
            _selectedStatuses = new HashSet<ServiceStatus> { service.OverallStatus };
            _showFilterPanel = true;
            await ApplyFilters();
            Snackbar.Add($"已筛选状态: {service.OverallStatus}", Severity.Info);
        }
    }
    
    private async Task FilterByDomainAsync(RegisteredServiceStatus? service)
    {
        if (service != null)
        {
            var domainName = service.DomainName ?? "未知";
            _selectedDomains = new HashSet<string> { domainName };
            _showFilterPanel = true;
            await ApplyFilters();
            Snackbar.Add($"已筛选域: {domainName}", Severity.Info);
        }
    }
    
    private async Task FilterByProjectAsync(RegisteredServiceStatus? service)
    {
        if (service != null && !string.IsNullOrEmpty(service.ProjectName))
        {
            _filterText = service.ProjectName;
            _showFilterPanel = true;
            await ApplyFilters();
            Snackbar.Add($"已筛选项目: {service.ProjectName}", Severity.Info);
        }
    }
    
    private async Task ClearAllFiltersAsync(RegisteredServiceStatus? service)
    {
        _filterText = string.Empty;
        _selectedStatuses = new HashSet<ServiceStatus>(Enum.GetValues<ServiceStatus>());
        var allDomains = _allServices.Select(s => s.DomainName ?? "未知").Distinct().ToList();
        _selectedDomains = new HashSet<string>(allDomains);
        _showOnlyWithInstances = false;
        await ApplyFilters();
        Snackbar.Add("已清除所有筛选", Severity.Info);
    }
    
    private async Task CopyServiceIdAsync(RegisteredServiceStatus? service)
    {
        if (service != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", service.AppId);
            Snackbar.Add("已复制服务ID到剪贴板", Severity.Success);
        }
    }
    
    private async Task CopyServiceNameAsync(RegisteredServiceStatus? service)
    {
        if (service != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", service.AppName);
            Snackbar.Add("已复制服务名到剪贴板", Severity.Success);
        }
    }

    private async Task ResetView()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("resetView");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("dispose");
            await _jsModule.DisposeAsync();
        }
    }
}