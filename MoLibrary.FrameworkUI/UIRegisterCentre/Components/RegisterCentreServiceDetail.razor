@using Microsoft.Extensions.Options
@using MoLibrary.RegisterCentre
@using MoLibrary.RegisterCentre.Models
@using MoLibrary.RegisterCentre.Modules
@inject IOptionsSnapshot<ModuleRegisterCentreOption> RegisterCentreOptions

@if (Service != null)
{
    <MudTabs Elevation="0" Rounded="true" Centered="false" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="服务概览">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudTextField T="string" Label="App ID" Value="@Service.AppId" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField T="string" Label="服务名称" Value="@Service.AppName" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField T="string" Label="项目名称" Value="@Service.ProjectName" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField T="string" Label="领域名" Value="@Service.DomainName" ReadOnly="true" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText Typo="Typo.h6" Class="mb-3">服务状态</MudText>
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudChip T="string" Color="@GetOverallStatusColor()" Icon="@GetOverallStatusIcon()" Size="Size.Large">
                                    @GetOverallStatusText()
                                </MudChip>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudText Typo="Typo.body1">运行实例: @Service.RunningInstanceCount</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudText Typo="Typo.body1">总实例数: @Service.TotalInstanceCount</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        
        <MudTabPanel Text="@($"实例列表 ({Service.TotalInstanceCount})")">
            <MudDataGrid T="ServiceInstance" Items="@Service.Instances.Values" Hover="true" Dense="true">
                <Columns>
                    <TemplateColumn Title="实例ID">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.InstanceId">
                                <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width: 200px;">
                                    @context.Item.InstanceId
                                </MudText>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="状态">
                        <CellTemplate>
                            @{
                                var (color, text, icon) = GetInstanceStatusInfo(context.Item.Status);
                            }
                            <MudChip T="string" Color="@color" Size="Size.Small" Icon="@icon">
                                @text
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.RegisterInfo.AssemblyVersion" Title="程序集版本" />
                    <PropertyColumn Property="x => x.RegisterInfo.ReleaseVersion" Title="发布版本" />
                    <PropertyColumn Property="x => x.RegisterInfo.BuildTime" Title="构建时间" Format="yyyy-MM-dd HH:mm:ss" />
                    <PropertyColumn Property="x => x.LastHeartbeatTime" Title="最后心跳" Format="yyyy-MM-dd HH:mm:ss" />
                    <PropertyColumn Property="x => x.RegistrationTime" Title="注册时间" Format="yyyy-MM-dd HH:mm:ss" />
                    <PropertyColumn Property="x => x.HeartbeatCount" Title="心跳次数" />
                    <TemplateColumn Title="心跳健康度">
                        <CellTemplate>
                            @{
                                var timeSinceHeartbeat = DateTime.Now - context.Item.LastHeartbeatTime;
                                var healthText = GetHeartbeatHealthText(timeSinceHeartbeat);
                                var healthColor = GetHeartbeatHealthColor(timeSinceHeartbeat);
                            }
                            <MudText Typo="Typo.body2" Color="@healthColor">@healthText</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        
        <MudTabPanel Text="配置信息">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="0">
                        <MudText Typo="Typo.h6" Class="mb-3">客户端配置</MudText>
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudTextField T="int" Label="心跳频率 (秒)" 
                                            Value="@(RegisterCentreOptions.Value.HeartbeatDuration / 1000)" 
                                            ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudTextField T="int" Label="重试次数" 
                                            Value="@RegisterCentreOptions.Value.ClientRetryTimes" 
                                            ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudTextField T="int" Label="重试频率 (秒)" 
                                            Value="@(RegisterCentreOptions.Value.RetryDuration / 1000)" 
                                            ReadOnly="true" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        
        <MudTabPanel Text="元数据信息">
            <MudGrid>
                @foreach (var instance in Service.Instances.Values)
                {
                    <MudItem xs="12">
                        <MudPaper Class="pa-4" Elevation="0">
                            <MudText Typo="Typo.h6" Class="mb-3">
                                实例 @instance.InstanceId 元数据
                                @{
                                    var (color, text, icon) = GetInstanceStatusInfo(instance.Status);
                                }
                                <MudChip T="string" Color="@color" Size="Size.Small" Icon="@icon" Class="ml-2">
                                    @text
                                </MudChip>
                            </MudText>
                            @if (instance.RegisterInfo.Metadata.Any())
                            {
                                <MudDataGrid T="KeyValuePair<string, string>" Items="@instance.RegisterInfo.Metadata" Dense="true" Hover="true">
                                    <Columns>
                                        <PropertyColumn Property="x => x.Key" Title="键" />
                                        <TemplateColumn Title="值">
                                            <CellTemplate>
                                                <MetadataValueDisplay Value="@context.Item.Value" />
                                            </CellTemplate>
                                        </TemplateColumn>
                                    </Columns>
                                </MudDataGrid>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">该实例没有元数据信息</MudAlert>
                            }
                        </MudPaper>
                    </MudItem>
                }
                @if (!Service.Instances.Any())
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Warning">没有可显示的实例信息</MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public RegisteredServiceStatus Service { get; set; } = null!;
    
    private Color GetOverallStatusColor()
    {
        return Service.OverallStatus switch
        {
            ServiceStatus.Running => Color.Success,
            ServiceStatus.Updating => Color.Info,
            ServiceStatus.Offline => Color.Default,
            ServiceStatus.Error => Color.Error,
            _ => Color.Default
        };
    }
    
    private string GetOverallStatusIcon()
    {
        return Service.OverallStatus switch
        {
            ServiceStatus.Running => Icons.Material.Filled.CheckCircle,
            ServiceStatus.Updating => Icons.Material.Filled.Update,
            ServiceStatus.Offline => Icons.Material.Filled.CloudOff,
            ServiceStatus.Error => Icons.Material.Filled.Error,
            _ => Icons.Material.Filled.Help
        };
    }
    
    private string GetOverallStatusText()
    {
        return Service.OverallStatus switch
        {
            ServiceStatus.Running => "运行中",
            ServiceStatus.Updating => "更新中",
            ServiceStatus.Offline => "离线",
            ServiceStatus.Error => "异常",
            _ => "未知"
        };
    }
    
    private (Color color, string text, string icon) GetInstanceStatusInfo(ServiceStatus status)
    {
        return status switch
        {
            ServiceStatus.Running => (Color.Success, "运行中", Icons.Material.Filled.CheckCircle),
            ServiceStatus.Updating => (Color.Info, "更新中", Icons.Material.Filled.Update),
            ServiceStatus.Offline => (Color.Default, "离线", Icons.Material.Filled.CloudOff),
            ServiceStatus.Error => (Color.Error, "异常", Icons.Material.Filled.Error),
            _ => (Color.Default, "未知", Icons.Material.Filled.Help)
        };
    }
    
    private string GetHeartbeatHealthText(TimeSpan timeSinceHeartbeat)
    {
        if (timeSinceHeartbeat.TotalSeconds < 30)
            return "健康";
        else if (timeSinceHeartbeat.TotalSeconds < 60)
            return "良好";
        else if (timeSinceHeartbeat.TotalMinutes < 5)
            return "警告";
        else
            return "超时";
    }
    
    private Color GetHeartbeatHealthColor(TimeSpan timeSinceHeartbeat)
    {
        if (timeSinceHeartbeat.TotalSeconds < 30)
            return Color.Success;
        else if (timeSinceHeartbeat.TotalSeconds < 60)
            return Color.Info;
        else if (timeSinceHeartbeat.TotalMinutes < 5)
            return Color.Warning;
        else
            return Color.Error;
    }
}