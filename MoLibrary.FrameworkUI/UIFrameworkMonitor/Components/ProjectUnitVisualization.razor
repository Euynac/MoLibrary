@using MoLibrary.Framework.Core.Model
@using MoLibrary.Framework.Services
@using MoLibrary.Tool.MoResponse
@using Microsoft.JSInterop
@using System.Linq
@using static MoLibrary.FrameworkUI.UIFrameworkMonitor.Components.ProjectUnitLayoutPanel
@inject IFrameworkMonitorService FrameworkMonitorService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">项目架构可视化</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudTooltip Text="刷新数据">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                               Color="Color.Primary"
                               OnClick="LoadProjectUnitsAsync"
                               Disabled="@_loading" />
            </MudTooltip>
            <MudTooltip Text="重置视图">
                <MudIconButton Icon="@Icons.Material.Filled.RestartAlt"
                               Color="Color.Secondary"
                               OnClick="ResetView"
                               Disabled="@_loading" />
            </MudTooltip>
            <MudTooltip Text="布局设置">
                <MudIconButton Icon="@Icons.Material.Filled.Dashboard"
                               Color="Color.Info"
                               OnClick="ToggleLayoutPanel" />
            </MudTooltip>
            <MudTooltip Text="筛选设置">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt"
                               Color="Color.Tertiary"
                               OnClick="ToggleFilterPanel" />
            </MudTooltip>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (_showLayoutPanel)
        {
            <ProjectUnitLayoutPanel CurrentLayout="_currentLayout"
                                    ForceDistance="_forceDistance"
                                    ForceStrength="_forceStrength"
                                    CurrentLayoutChanged="OnLayoutChanged"
                                    ForceDistanceChanged="OnForceDistanceChanged"
                                    ForceStrengthChanged="OnForceStrengthChanged" />
        }
        
        @if (_showFilterPanel)
        {
            @if (!string.IsNullOrEmpty(_relatedToNodeId))
            {
                var relatedUnit = _allProjectUnits.FirstOrDefault(u => u.Key == _relatedToNodeId);
                <MudAlert Severity="Severity.Info" Class="mb-2" CloseIconClicked="() => ClearRelatedFilter()">
                    正在显示与 <strong>@(relatedUnit?.Title ?? _relatedToNodeId)</strong> 连通的所有节点
                </MudAlert>
            }
            
            <ProjectUnitFilterPanel @bind-FilterText="_filterText"
                                    @bind-SelectedUnitTypes="_selectedUnitTypes"
                                    @bind-ShowOnlyWithDependencies="_showOnlyWithDependencies"
                                    @bind-ShowOnlyWithAlerts="_showOnlyWithAlerts"
                                    OnFiltersChanged="ApplyFilters" />
        }

        <MudPaper Class="visualization-container" Style="position: relative; height: 600px; overflow: hidden;">
            @if (_loading)
            {
                <MudOverlay Visible="true" DarkBackground="false" Absolute="true">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                </MudOverlay>
            }
            <div id="project-unit-graph" style="width: 100%; height: 100%;" @onclick="OnBackgroundClick" @oncontextmenu:preventDefault="true"></div>
        </MudPaper>

        <MudPaper Class="mt-4 pa-2" Elevation="0" Outlined="true">
            <MudGrid AlignItems="Center">
                <MudItem xs="12" sm="8">
                    <MudText Typo="Typo.caption">
                        显示 @_filteredUnits.Count / @_allProjectUnits.Count 个项目单元
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="4" Class="d-flex justify-end">
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Circle" Color="Color.Info">圆形: 简单单元</MudChip>
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Square" Color="Color.Warning">矩形: 复杂单元</MudChip>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>

<ProjectUnitDetailDialog @bind-Visible="_detailDialogVisible" 
                         SelectedUnit="_selectedUnit"
                         AllProjectUnits="_allProjectUnits"
                         OnNodeFocus="HandleNodeFocusFromDialog" />

@* 右键菜单 - 使用固定定位在页面上 *@
@if (_contextMenuOpen)
{
    @* 透明覆盖层，用于捕获点击事件来关闭菜单 *@
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999;" @onclick="CloseContextMenu"></div>
    
    <div style="position: fixed; left: @(_contextMenuX)px; top: @(_contextMenuY)px; z-index: 10000;" @onclick:stopPropagation="true">
        <MudPaper Elevation="8" Class="pa-0">
            <MudList T="string" Dense="true" Clickable="true">
                <MudListItem T="string" Icon="@Icons.Material.Filled.Info" OnClick="ShowContextDetails">
                    查看详情
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.CenterFocusStrong" OnClick="FocusOnNode">
                    聚焦此节点
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.FilterAlt" OnClick="FilterByType">
                    筛选同类型
                </MudListItem>
                @if (!string.IsNullOrEmpty(_relatedToNodeId))
                {
                    @if (_relatedToNodeId == _contextMenuUnit?.Key)
                    {
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Clear" OnClick="ClearRelatedFilter">
                            取消连通节点筛选
                        </MudListItem>
                    }
                    else
                    {
                        <MudListItem T="string" Icon="@Icons.Material.Filled.AccountTree" OnClick="ShowRelatedNodes">
                            显示其他连通节点
                        </MudListItem>
                    }
                }
                else
                {
                    <MudListItem T="string" Icon="@Icons.Material.Filled.AccountTree" OnClick="ShowRelatedNodes">
                        显示连通节点
                    </MudListItem>
                }
                <MudListItem T="string" Icon="@Icons.Material.Filled.ClearAll" OnClick="ClearAllFilters">
                    清除所有筛选
                </MudListItem>
                <MudDivider />
                <MudListItem T="string" Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopyFullName">
                    复制完整名称
                </MudListItem>
            </MudList>
        </MudPaper>
    </div>
}

@code {
    private IJSObjectReference? _jsModule;
    private List<DtoProjectUnit> _allProjectUnits = new();
    private List<DtoProjectUnit> _filteredUnits = new();
    private bool _loading = false;
    private bool _detailDialogVisible = false;
    private DtoProjectUnit? _selectedUnit;
    private DtoProjectUnit? _contextMenuUnit;
    private bool _showFilterPanel = false;
    private bool _showLayoutPanel = false;
    private string _filterText = string.Empty;
    private IReadOnlyCollection<EProjectUnitType> _selectedUnitTypes = new HashSet<EProjectUnitType>();
    private bool _showOnlyWithDependencies = false;
    private bool _showOnlyWithAlerts = false;
    private string? _relatedToNodeId = null;
    private bool _contextMenuOpen = false;
    private double _contextMenuX = 0;
    private double _contextMenuY = 0;
    private LayoutType _currentLayout = LayoutType.Force;
    private int _forceDistance = 300;
    private int _forceStrength = -300;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", 
				"./_content/MoLibrary.FrameworkUI/UIFrameworkMonitor/Components/projectUnitGraph.js");
            
            await InitializeGraph();
            await LoadProjectUnitsAsync();
        }
    }

    private async Task InitializeGraph()
    {
        if (_jsModule != null)
        {
            var isDarkMode = await JSRuntime.InvokeAsync<bool>("eval", 
                "document.documentElement.classList.contains('dark')");
            
            await _jsModule.InvokeVoidAsync("initializeGraph", "project-unit-graph", isDarkMode,
                DotNetObjectReference.Create(this));
        }
    }

    private async Task LoadProjectUnitsAsync()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var result = await FrameworkMonitorService.GetAllProjectUnitsAsync();
            if (result.IsFailed(out var error, out var data))
            {
                Snackbar.Add($"加载失败: {error}", Severity.Error);
                return;
            }

            _allProjectUnits = data;
            // Initialize selected types to all types if empty
            if (!_selectedUnitTypes.Any())
            {
                _selectedUnitTypes = new HashSet<EProjectUnitType>(
                    Enum.GetValues<EProjectUnitType>().Where(t => t != EProjectUnitType.None)
                );
            }
            _filteredUnits = new List<DtoProjectUnit>(_allProjectUnits);
            await UpdateGraph();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载异常: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateGraph()
    {
        if (_jsModule != null)
        {
            var graphData = PrepareGraphData();
            await _jsModule.InvokeVoidAsync("updateGraph", graphData);
            // 应用当前布局设置
            await SetLayout(_currentLayout);
            if (_currentLayout == LayoutType.Force)
            {
                await _jsModule.InvokeVoidAsync("setForceDistance", _forceDistance);
                await _jsModule.InvokeVoidAsync("setForceStrength", _forceStrength);
            }
        }
    }

    private object PrepareGraphData()
    {
        var nodes = _filteredUnits.Select(unit => new
        {
            id = unit.Key,
            title = unit.Title,
            type = unit.UnitType.ToString(),
            typeValue = (int)unit.UnitType,
            dependencyCount = unit.DependencyUnits.Count,
            dependedByCount = unit.DependedByCount,
            hasAttributes = unit.Attributes.Any(),
            methodCount = unit.Methods.Count,
            hasMethod = unit.Methods.Any(),
            // 添加节点配置信息
            isComplex = ProjectUnitVisualizationConfig.IsComplexUnitType(unit.UnitType),
            color = ProjectUnitVisualizationConfig.GetUnitTypeColor(unit.UnitType),
            icon = ProjectUnitVisualizationConfig.GetUnitTypeIcon(unit.UnitType),
            chips = ProjectUnitVisualizationConfig.GetUnitTypeChips(unit),
            metadata = ProjectUnitVisualizationConfig.GetUnitMetadata(unit),
            // 添加告警信息
            alertLevel = ProjectUnitVisualizationConfig.GetHighestAlertLevel(unit),
            alertCount = unit.Alerts.Count
        }).ToList();

        var links = new List<object>();
        foreach (var unit in _filteredUnits)
        {
            foreach (var dep in unit.DependencyUnits)
            {
                if (_filteredUnits.Any(u => u.Key == dep.Key))
                {
                    links.Add(new
                    {
                        source = unit.Key,
                        target = dep.Key
                    });
                }
            }
        }

        return new { nodes, links };
    }

    private void ToggleFilterPanel()
    {
        _showFilterPanel = !_showFilterPanel;
        if (_showFilterPanel) _showLayoutPanel = false;
    }
    
    private void ToggleLayoutPanel()
    {
        _showLayoutPanel = !_showLayoutPanel;
        if (_showLayoutPanel) _showFilterPanel = false;
    }
    
    private async Task SetLayout(LayoutType layoutType)
    {
        _currentLayout = layoutType;
        if (_jsModule != null)
        {
            var layoutName = layoutType switch
            {
                LayoutType.Force => "force",
                LayoutType.Hierarchy => "hierarchy",
                LayoutType.Circular => "circular",
                LayoutType.MultiCircular => "multi_circular",
                _ => "force"
            };
            await _jsModule.InvokeVoidAsync("setLayout", layoutName);
        }
    }
    
    private async Task OnForceDistanceChanged(int value)
    {
        _forceDistance = value;
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("setForceDistance", value);
        }
    }
    
    private async Task OnForceStrengthChanged(int value)
    {
        _forceStrength = value;
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("setForceStrength", value);
        }
    }

    private async Task ApplyFilters()
    {
        _filteredUnits = _allProjectUnits.Where(unit =>
        {
            // 如果设置了相关节点筛选，则只显示相关节点
            if (!string.IsNullOrEmpty(_relatedToNodeId))
            {
                var relatedNodes = GetAllRelatedNodes(_relatedToNodeId);
                return relatedNodes.Contains(unit.Key);
            }

            var matchesText = string.IsNullOrWhiteSpace(_filterText) ||
                unit.Title.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                unit.Key.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(unit.Author) && unit.Author.Contains(_filterText, StringComparison.OrdinalIgnoreCase)) ||
                (unit.Group?.Any(g => g.Contains(_filterText, StringComparison.OrdinalIgnoreCase)) == true) ||
                (!string.IsNullOrEmpty(unit.Description) && unit.Description.Contains(_filterText, StringComparison.OrdinalIgnoreCase));

            var matchesType = !_selectedUnitTypes.Any() || _selectedUnitTypes.Contains(unit.UnitType);

            var matchesDependencies = !_showOnlyWithDependencies || unit.DependencyUnits.Any() || unit.DependedByCount > 0;

            var matchesAlerts = !_showOnlyWithAlerts || unit.Alerts.Any();

            return matchesText && matchesType && matchesDependencies && matchesAlerts;
        }).ToList();

        await UpdateGraph();
    }

    private async Task ResetView()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("resetView");
        }
    }

    [JSInvokable]
    public void OnNodeClick(string nodeId)
    {
        _selectedUnit = _allProjectUnits.FirstOrDefault(u => u.Key == nodeId);
        if (_selectedUnit != null)
        {
            _detailDialogVisible = true;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnNodeRightClick(string nodeId, double x, double y)
    {
        _contextMenuUnit = _allProjectUnits.FirstOrDefault(u => u.Key == nodeId);
        if (_contextMenuUnit != null)
        {
            _contextMenuX = x;
            _contextMenuY = y;
            _contextMenuOpen = true;
            StateHasChanged();
        }
    }
    
    private void OnBackgroundClick()
    {
        _detailDialogVisible = false;
        if (_contextMenuOpen)
        {
            _contextMenuOpen = false;
            StateHasChanged();
        }
    }
    
    [JSInvokable]
    public void OnSvgBackgroundClick()
    {
        if (_contextMenuOpen)
        {
            _contextMenuOpen = false;
            StateHasChanged();
        }
    }

    private void CloseContextMenu()
    {
        _contextMenuOpen = false;
    }
    
    private void ShowContextDetails()
    {
        _selectedUnit = _contextMenuUnit;
        _detailDialogVisible = true;
        _contextMenuOpen = false;
    }

    private async Task FocusOnNode()
    {
        if (_jsModule != null && _contextMenuUnit != null)
        {
            await _jsModule.InvokeVoidAsync("focusOnNode", _contextMenuUnit.Key);
        }
        _contextMenuOpen = false;
    }

    private async Task OnLayoutChanged(LayoutType layoutType)
    {
        _currentLayout = layoutType;
        await SetLayout(layoutType);
    }

    private async Task FilterByType()
    {
        if (_contextMenuUnit != null)
        {
            _selectedUnitTypes = new HashSet<EProjectUnitType> { _contextMenuUnit.UnitType };
            _showFilterPanel = true;
            await ApplyFilters();
        }
        _contextMenuOpen = false;
    }
    
    private async Task ClearAllFilters()
    {
        _filterText = string.Empty;
        _selectedUnitTypes = new HashSet<EProjectUnitType>(
            Enum.GetValues<EProjectUnitType>().Where(t => t != EProjectUnitType.None)
        );
        _showOnlyWithDependencies = false;
        _showOnlyWithAlerts = false;
        _relatedToNodeId = null;
        await ApplyFilters();
        _contextMenuOpen = false;
    }

    private async Task ShowRelatedNodes()
    {
        if (_contextMenuUnit != null)
        {
            _relatedToNodeId = _contextMenuUnit.Key;
            _showFilterPanel = true;
            await ApplyFilters();
            Snackbar.Add($"显示与 {_contextMenuUnit.Title} 连通的所有节点", Severity.Info);
        }
        _contextMenuOpen = false;
    }
    
    private HashSet<string> GetAllRelatedNodes(string nodeId)
    {
        var related = new HashSet<string>();
        var queue = new Queue<string>();
        
        // 从起始节点开始
        queue.Enqueue(nodeId);
        related.Add(nodeId);
        
        // 使用广度优先搜索找到整个连通图
        while (queue.Count > 0)
        {
            var currentId = queue.Dequeue();
            var currentUnit = _allProjectUnits.FirstOrDefault(u => u.Key == currentId);
            
            if (currentUnit != null)
            {
                // 查找当前节点的所有依赖（出边）
                foreach (var dep in currentUnit.DependencyUnits)
                {
                    if (related.Add(dep.Key))
                    {
                        queue.Enqueue(dep.Key);
                    }
                }
            }
            
            // 查找依赖当前节点的所有节点（入边）
            var dependents = _allProjectUnits.Where(u => 
                u.DependencyUnits.Any(d => d.Key == currentId));
            
            foreach (var dependent in dependents)
            {
                if (related.Add(dependent.Key))
                {
                    queue.Enqueue(dependent.Key);
                }
            }
        }
        
        return related;
    }

    private async Task ClearRelatedFilter()
    {
        _relatedToNodeId = null;
        await ApplyFilters();
        _contextMenuOpen = false;
    }

    private async Task CopyFullName()
    {
        if (_contextMenuUnit != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _contextMenuUnit.Key);
            Snackbar.Add("已复制到剪贴板", Severity.Success);
        }
        _contextMenuOpen = false;
    }
    
    private async Task HandleNodeFocusFromDialog(string nodeKey)
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("focusOnNode", nodeKey);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("dispose");
            await _jsModule.DisposeAsync();
        }
    }

}