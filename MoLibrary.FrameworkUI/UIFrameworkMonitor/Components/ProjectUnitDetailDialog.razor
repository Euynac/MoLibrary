@using MoLibrary.Framework.Core.Model
@using MoLibrary.Framework.Core.Attributes
@using MoLibrary.UI.Components
@using System.Linq
@using System.Reflection
@using MoLibrary.Framework.Services
@using MoLibrary.Tool.Extensions
@inject IFrameworkMonitorService FrameworkMonitorService

<MudDialog @bind-Visible="Visible" Options="DialogOptions" OnBackdropClick="HandleBackdropClick">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3" />
            项目单元详情
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (SelectedUnit != null)
        {
            <MudSimpleTable Style="overflow-x: auto;" Elevation="0">
                <tbody>
                    <tr>
                        <td style="min-width: 120px;"><MudText Typo="Typo.subtitle2">单元名称</MudText></td>
                        <td><MudText>@SelectedUnit.Title</MudText></td>
                    </tr>
                    <tr>
                        <td><MudText Typo="Typo.subtitle2">完整名称</MudText></td>
                        <td><MudText>@SelectedUnit.Key</MudText></td>
                    </tr>
                    @if (!string.IsNullOrEmpty(SelectedUnit.Author))
                    {
                        <tr>
                            <td><MudText Typo="Typo.subtitle2">作者</MudText></td>
                            <td><MudText>@SelectedUnit.Author</MudText></td>
                        </tr>
                    }
                    @if (SelectedUnit.Group?.Any() == true)
                    {
                        <tr>
                            <td><MudText Typo="Typo.subtitle2">分组</MudText></td>
                            <td><MudText>@string.Join(", ", SelectedUnit.Group)</MudText></td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(SelectedUnit.Description))
                    {
                        <tr>
                            <td><MudText Typo="Typo.subtitle2">描述</MudText></td>
                            <td><MudText>@SelectedUnit.Description</MudText></td>
                        </tr>
                    }
                    <tr>
                        <td><MudText Typo="Typo.subtitle2">单元类型</MudText></td>
                        <td>
                            <MudChip T="string" Size="Size.Small" 
                                     Style="@($"background-color: {GetUnitTypeColor(SelectedUnit.UnitType)}; color: white;")">
                                @SelectedUnit.UnitType.ToString()
                            </MudChip>
                        </td>
                    </tr>
                    <tr>
                        <td><MudText Typo="Typo.subtitle2">统计信息</MudText></td>
                        <td>
                            <MudChipSet T="string">
                                @if (SelectedUnit.DependencyUnits.Count > 0)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info" 
                                             Icon="@Icons.Material.Filled.Link">
                                        依赖 @SelectedUnit.DependencyUnits.Count
                                    </MudChip>
                                }
                                @if (SelectedUnit.DependedByCount > 0)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success"
                                             Icon="@Icons.Material.Filled.CallReceived">
                                        被依赖 @SelectedUnit.DependedByCount
                                    </MudChip>
                                }
                                @if (SelectedUnit.Attributes.Any())
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary"
                                             Icon="@Icons.Material.Filled.Label">
                                        特性 @SelectedUnit.Attributes.Count
                                    </MudChip>
                                }
                                @if (SelectedUnit.Methods.Any())
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary"
                                             Icon="@Icons.Material.Filled.Functions">
                                        方法 @SelectedUnit.Methods.Count
                                    </MudChip>
                                }
                                @if (SelectedUnit.Alerts.Any())
                                {
                                    var errorCount = SelectedUnit.Alerts.Count(a => a.Level == EAlertLevel.Error);
                                    var warningCount = SelectedUnit.Alerts.Count(a => a.Level == EAlertLevel.Warning);
                                    var infoCount = SelectedUnit.Alerts.Count(a => a.Level == EAlertLevel.Info);
                                    
                                    @if (errorCount > 0)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Error"
                                                 Icon="@Icons.Material.Filled.Error">
                                            错误 @errorCount
                                        </MudChip>
                                    }
                                    @if (warningCount > 0)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Warning"
                                                 Icon="@Icons.Material.Filled.Warning">
                                            警告 @warningCount
                                        </MudChip>
                                    }
                                    @if (infoCount > 0)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info"
                                                 Icon="@Icons.Material.Filled.Info">
                                            信息 @infoCount
                                        </MudChip>
                                    }
                                }
                            </MudChipSet>
                        </td>
                    </tr>
                    @if (SelectedUnit.DependencyUnits.Any())
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">依赖单元</MudText></td>
                            <td>
                                <MudChipSet T="string">
                                    @foreach (var dep in SelectedUnit.DependencyUnits)
                                    {
                                        <MudChip T="string" Size="Size.Small" 
                                                 Style="@($"background-color: {GetUnitTypeColor(dep.UnitType)}; color: white;")"
                                                 OnClick="@(() => OnChipClick(dep.Key))">
                                            @dep.Title
                                        </MudChip>
                                    }
                                </MudChipSet>
                            </td>
                        </tr>
                    }
                    @* Configuration单元的IsOffline信息 *@
                    @if (SelectedUnit.UnitType == EProjectUnitType.Configuration && _originalProjectUnit is UnitConfiguration configUnit)
                    {
                        <tr>
                            <td><MudText Typo="Typo.subtitle2">配置模式</MudText></td>
                            <td>
                                @{
                                    var modeText = configUnit.IsOffline switch
                                    {
                                        true => "离线配置",
                                        false => "在线配置", 
                                        null => "未知模式"
                                    };
                                    var modeColor = configUnit.IsOffline switch
                                    {
                                        true => Color.Success,
                                        false => Color.Warning,
                                        null => Color.Default
                                    };
                                    var modeIcon = configUnit.IsOffline switch
                                    {
                                        true => Icons.Material.Filled.CloudOff,
                                        false => Icons.Material.Filled.Cloud,
                                        null => Icons.Material.Filled.QuestionMark
                                    };
                                }
                                <MudChip T="string" Size="Size.Small" Color="@modeColor" Icon="@modeIcon">
                                    @modeText
                                </MudChip>
                            </td>
                        </tr>
                        @* Configuration依赖详情 *@
                        @if (configUnit.ConfigurationDependencies.Any())
                        {
                            <tr>
                                <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">使用方式</MudText></td>
                                <td>
                                    <MudExpansionPanels>
                                        <MudExpansionPanel>
                                            <TitleContent>
                                                <div style="display: flex; align-items: center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Link" class="mr-3" />
                                                    <MudText>配置使用详情 (@configUnit.ConfigurationDependencies.Count)</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudStack Spacing="1">
                                                    @foreach (var dependency in configUnit.ConfigurationDependencies)
                                                    {
                                                        var unit = dependency.Key;
                                                        var usage = dependency.Value;
                                                        var usageText = usage switch
                                                        {
                                                            EConfigurationUsageType.Offline => "IOptions (离线)",
                                                            EConfigurationUsageType.OnlineSnapshot => "IOptionsSnapshot (在线)",
                                                            EConfigurationUsageType.OnlineMonitor => "IOptionsMonitor (在线)",
                                                            EConfigurationUsageType.Unknown => "未知方式",
                                                            _ => "未知方式"
                                                        };
                                                        var usageColor = usage switch
                                                        {
                                                            EConfigurationUsageType.Offline => Color.Success,
                                                            EConfigurationUsageType.OnlineSnapshot => Color.Warning,
                                                            EConfigurationUsageType.OnlineMonitor => Color.Info,
                                                            EConfigurationUsageType.Unknown => Color.Default,
                                                            _ => Color.Default
                                                        };
                                                        var usageIcon = usage switch
                                                        {
                                                            EConfigurationUsageType.Offline => Icons.Material.Filled.CloudOff,
                                                            EConfigurationUsageType.OnlineSnapshot => Icons.Material.Filled.Cloud,
                                                            EConfigurationUsageType.OnlineMonitor => Icons.Material.Filled.Refresh,
                                                            EConfigurationUsageType.Unknown => Icons.Material.Filled.QuestionMark,
                                                            _ => Icons.Material.Filled.QuestionMark
                                                        };
                                                        
                                                        <div class="d-flex align-center justify-space-between">
                                                            <div class="d-flex align-center">
                                                                <MudChip T="string" Size="Size.Small" 
                                                                         Style="@($"background-color: {GetUnitTypeColor(unit.UnitType)}; color: white;")"
                                                                         OnClick="@(() => OnChipClick(unit.Key))">
                                                                    @unit.Title
                                                                </MudChip>
                                                                <MudText Typo="Typo.caption" Class="ml-2" Style="color: var(--mud-palette-text-secondary);">
                                                                    (@unit.UnitType.ToString())
                                                                </MudText>
                                                            </div>
                                                            <MudChip T="string" Size="Size.Small" Color="@usageColor" Icon="@usageIcon">
                                                                @usageText
                                                            </MudChip>
                                                        </div>
                                                    }
                                                </MudStack>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </td>
                            </tr>
                        }
                    }
                    @* 构造函数参数信息 *@
                    @if (_originalProjectUnit?.ConstructorParameterTypes.Any() == true)
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">构造参数</MudText></td>
                            <td>
                                <MudExpansionPanels>
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <div style="display: flex; align-items: center">
                                                <MudIcon Icon="@Icons.Material.Filled.Construction" class="mr-3" />
                                                <MudText>构造函数参数 (@_originalProjectUnit.ConstructorParameterTypes.Count)</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            <MudStack Spacing="1">
                                                @foreach (var paramType in _originalProjectUnit.ConstructorParameterTypes)
                                                {
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Small" Class="mr-2" />
                                                        <MudText Style="font-family: 'Cascadia Code', 'JetBrains Mono', monospace; background-color: var(--mud-palette-background-grey); padding: 4px 8px; border-radius: 4px;">
                                                            @paramType.GetCleanName()
                                                        </MudText>
                                                        <MudText Typo="Typo.caption" Class="ml-2" Style="color: var(--mud-palette-text-secondary);">
                                                            (@paramType.GetCleanFullName())
                                                        </MudText>
                                                    </div>
                                                }
                                            </MudStack>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </td>
                        </tr>
                    }
                    @if (DependedByUnits != null && DependedByUnits.Any())
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">被依赖单元</MudText></td>
                            <td>
                                <MudChipSet T="string">
                                    @foreach (var dep in DependedByUnits)
                                    {
                                        <MudChip T="string" Size="Size.Small"
                                                 Style="@($"background-color: {GetUnitTypeColor(dep.UnitType)}; color: white;")"
                                                 OnClick="@(() => OnChipClick(dep.Key))">
                                            @dep.Title
                                        </MudChip>
                                    }
                                </MudChipSet>
                            </td>
                        </tr>
                    }
                    @if (SelectedUnit.Attributes.Any())
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">特性</MudText></td>
                            <td>
                                <MudChipSet T="string">
                                    @foreach (var attr in SelectedUnit.Attributes)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary">
                                            @attr.GetType().Name
                                        </MudChip>
                                    }
                                </MudChipSet>
                            </td>
                        </tr>
                    }
                    @if (SelectedUnit.Methods.Any())
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">方法信息</MudText></td>
                            <td>
                                <MudExpansionPanels>
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <div style="display: flex; align-items: center">
                                                <MudIcon Icon="@Icons.Material.Filled.Functions" class="mr-3" />
                                                <MudText>公共方法 (@SelectedUnit.Methods.Count)</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            <MudStack Spacing="2">
                                                @foreach (var method in SelectedUnit.Methods)
                                                {
                                                    <MudCard Outlined="true" Style="border-left: 3px solid var(--mud-palette-primary);">
                                                        <MudCardContent Class="pa-2">
                                                            <div class="d-flex align-center justify-space-between">
                                                                <MudText Typo="Typo.caption" Style="font-family: 'Cascadia Code', 'JetBrains Mono', monospace; background-color: var(--mud-palette-background-grey); padding: 6px 10px; border-radius: 4px; flex-grow: 1;">
                                                                    @method.MethodSignature
                                                                </MudText>
                                                                <MudChipSet T="string" Class="ml-2">
                                                                    @if (method.MethodInfo.IsStatic)
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary" 
                                                                                 Icon="@Icons.Material.Filled.Public">
                                                                            Static
                                                                        </MudChip>
                                                                    }
                                                                    @if (method.MethodInfo.IsVirtual && !method.MethodInfo.IsAbstract)
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Color="Color.Tertiary">
                                                                            Virtual
                                                                        </MudChip>
                                                                    }
                                                                    @if (method.MethodInfo.IsAbstract)
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Color="Color.Warning">
                                                                            Abstract
                                                                        </MudChip>
                                                                    }
                                                                    @if (IsAsyncMethod(method.MethodInfo))
                                                                    {
                                                                        <MudChip T="string" Size="Size.Small" Color="Color.Info" 
                                                                                 Icon="@Icons.Material.Filled.Sync">
                                                                            Async
                                                                        </MudChip>
                                                                    }
                                                                </MudChipSet>
                                                            </div>
                                                            
                                                            @if (!string.IsNullOrEmpty(method.Description))
                                                            {
                                                                <MudText Typo="Typo.body2" Class="mt-2 ml-2" Style="color: var(--mud-palette-text-secondary); font-style: italic;">
                                                                    // @method.Description
                                                                </MudText>
                                                            }
                                                        </MudCardContent>
                                                    </MudCard>
                                                }
                                            </MudStack>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </td>
                        </tr>
                    }
                    @if (SelectedUnit.Alerts.Any())
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">告警信息</MudText></td>
                            <td>
                                <MudStack Spacing="1">
                                    @foreach (var alert in SelectedUnit.Alerts.OrderByDescending(a => a.Level))
                                    {
                                        var alertColor = alert.Level switch
                                        {
                                            EAlertLevel.Error => Color.Error,
                                            EAlertLevel.Warning => Color.Warning,
                                            EAlertLevel.Info => Color.Info,
                                            _ => Color.Default
                                        };
                                        var alertIcon = alert.Level switch
                                        {
                                            EAlertLevel.Error => Icons.Material.Filled.Error,
                                            EAlertLevel.Warning => Icons.Material.Filled.Warning,
                                            EAlertLevel.Info => Icons.Material.Filled.Info,
                                            _ => Icons.Material.Filled.Info
                                        };
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@alertIcon" Color="@alertColor" Size="Size.Small" Class="mr-2" />
                                            <MudText>
                                                <strong>[@alert.Level]</strong> @alert.Message
                                                @if (!string.IsNullOrEmpty(alert.Source))
                                                {
                                                    <MudText Typo="Typo.caption" Class="ml-2" Style="display: inline;">(@alert.Source)</MudText>
                                                }
                                            </MudText>
                                        </div>
                                    }
                                </MudStack>
                            </td>
                        </tr>
                    }
                    @{
                        var unitInfoAttribute = GetUnitInfoAttribute();
                    }
                    @if (unitInfoAttribute?.MarkdownDocs != null)
                    {
                        <tr>
                            <td style="vertical-align: top;"><MudText Typo="Typo.subtitle2">文档</MudText></td>
                            <td>
                                <MudExpansionPanels>
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <div style="display: flex; align-items: center">
                                                <MudIcon Icon="@Icons.Material.Filled.Description" class="mr-3" />
                                                <MudText>Markdown文档</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            <MoMarkdownThemeManager />
                                            <div style="max-height: 400px; overflow-y: auto;">
                                                <MudMarkdown Value="@unitInfoAttribute.MarkdownDocs" />
                                            </div>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">关闭</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    
    [Parameter] public DtoProjectUnit? SelectedUnit { get; set; }
    [Parameter] public List<DtoProjectUnit>? AllProjectUnits { get; set; }
    [Parameter] public EventCallback<string> OnNodeFocus { get; set; }
    
    private List<DtoProjectUnit>? DependedByUnits { get; set; }
    private ProjectUnit? _originalProjectUnit;
    
    private readonly DialogOptions DialogOptions = new()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        BackdropClick = true, 
        CloseOnEscapeKey = true 
    };
    
    protected override void OnParametersSet()
    {
        if (SelectedUnit != null && AllProjectUnits != null)
        {
            // 计算被依赖的单元（哪些单元依赖了当前单元）
            DependedByUnits = AllProjectUnits
                .Where(u => u.DependencyUnits.Any(d => d.Key == SelectedUnit.Key))
                .ToList();
            
            // 尝试获取原始ProjectUnit实例
            _originalProjectUnit = FrameworkMonitorService.GetProjectUnitByKey(SelectedUnit.Key);
        }
    }
    
    private async Task OnChipClick(string nodeKey)
    {
        // 关闭对话框
        await VisibleChanged.InvokeAsync(false);
        
        // 触发聚焦事件
        if (OnNodeFocus.HasDelegate)
        {
            await OnNodeFocus.InvokeAsync(nodeKey);
        }
    }
    
    private async Task Close()
    {
        await VisibleChanged.InvokeAsync(false);
    }
    
    private async Task HandleBackdropClick()
    {
        // 手动处理背景点击，确保状态正确同步
        await VisibleChanged.InvokeAsync(false);
    }
    
    private string GetUnitTypeColor(EProjectUnitType unitType)
    {
        return ProjectUnitVisualizationConfig.GetUnitTypeColor(unitType);
    }
    
    private bool IsAsyncMethod(MethodInfo method)
    {
        return method.ReturnType.IsGenericType && 
               (method.ReturnType.GetGenericTypeDefinition() == typeof(Task<>) || 
                method.ReturnType == typeof(Task));
    }
    
    private UnitInfoAttribute? GetUnitInfoAttribute()
    {
        return SelectedUnit?.Attributes.OfType<UnitInfoAttribute>().FirstOrDefault();
    }
}