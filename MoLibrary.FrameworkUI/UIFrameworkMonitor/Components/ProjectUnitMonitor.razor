@using MoLibrary.Framework.Core.Model
@using MoLibrary.Framework.Services
@using MoLibrary.Tool.MoResponse
@inject IFrameworkMonitorService FrameworkMonitorService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">项目单元监控</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="LoadProjectUnitsAsync"
                      StartIcon="@Icons.Material.Filled.Refresh"
                      Disabled="@_loading">
                刷新
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (_loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
        else if (_projectUnits.Any())
        {
            <MudDataGrid @ref="_dataGrid" T="DtoProjectUnit" Items="@_projectUnits" Filterable="true" 
                        SortMode="SortMode.Multiple" Groupable="true" GroupExpanded="false"
                        Dense="true" Hover="true" ReadOnly="true">
                <Columns>
                    <PropertyColumn Property="x => x.Title" Title="单元名称" />
                    <PropertyColumn Property="x => x.Key" Title="完整名称" />
                    <TemplateColumn Title="单元类型">
                        <CellTemplate>
                            <MudChip T="string" Size="Size.Small" 
                                     Style="@($"background-color: {ProjectUnitVisualizationConfig.GetUnitTypeColor(context.Item.UnitType)}; color: white;")">
                                @context.Item.UnitType.ToString()
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="依赖数量" Sortable="false">
                        <CellTemplate>
                            <MudChip T="int" Size="Size.Small" Color="Color.Info" 
                                     Icon="@Icons.Material.Filled.Link">
                                @context.Item.DependencyUnits.Count
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="被依赖数量" Sortable="false">
                        <CellTemplate>
                            <MudChip T="int" Size="Size.Small" Color="Color.Success"
                                     Icon="@Icons.Material.Filled.CallReceived">
                                @context.Item.DependedByCount
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="操作" Sortable="false">
                        <CellTemplate>
                            <MudButton Size="Size.Small" 
                                      Variant="Variant.Text" 
                                      Color="Color.Primary"
                                      OnClick="@(() => ViewDetails(context.Item))">
                                详情
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                暂无项目单元数据，请点击刷新按钮加载数据。
            </MudAlert>
        }
    </MudCardContent>
</MudCard>

<ProjectUnitDetailDialog @bind-Visible="_detailDialogVisible" 
                         SelectedUnit="_selectedUnit"
                         AllProjectUnits="_projectUnits" />

@code {
    private MudDataGrid<DtoProjectUnit>? _dataGrid;
    private List<DtoProjectUnit> _projectUnits = new();
    private bool _loading = false;
    private bool _detailDialogVisible = false;
    private DtoProjectUnit? _selectedUnit;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProjectUnitsAsync();
        }
    }

    private async Task LoadProjectUnitsAsync()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var result = await FrameworkMonitorService.GetAllProjectUnitsAsync();
            if (result.IsFailed(out var error, out var data))
            {
                Snackbar.Add($"加载失败: {error}", Severity.Error);
                return;
            }

            _projectUnits = data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载异常: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ViewDetails(DtoProjectUnit unit)
    {
        _selectedUnit = unit;
        _detailDialogVisible = true;
    }
}