@using MoLibrary.Core.Modules
@using MoLibrary.Tool.MoResponse
@using MoLibrary.UI.Components
@inject MapperService MapperService
@inject ISnackbar Snackbar

@attribute [Route(MAPPER_DEBUG_URL)]

<PageTitle>Mapper调试</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudStack>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <div style="display: flex; align-items: center;">
                        <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-3" />
                        <MudText Typo="Typo.h5">Mapper映射调试</MudText>
                    </div>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-4">
                    查看和调试所有已注册的Mapper映射表达式
                </MudText>
                
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Refresh"
                              OnClick="LoadDataAsync"
                              Disabled="@_loading">
                        @if (_loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">加载中...</MudText>
                        }
                        else
                        {
                            <MudText>刷新数据</MudText>
                        }
                    </MudButton>
                    
                    @if (_mapperData is not null)
                    {
                        <MudChip T="string" Color="Color.Info" Size="Size.Small">
                            总计: @_mapperData.Count 个映射
                        </MudChip>
                    }
                </MudStack>
            </MudCardContent>
        </MudCard>

        @if (_mapperData?.MapperInfos is not null && _mapperData.MapperInfos.Any())
        {
            <MudCard>
                <MudCardContent>
                    <MudTable T="MapperInfo" Items="@_mapperData.MapperInfos" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>源类型</MudTh>
                            <MudTh>目标类型</MudTh>
                            <MudTh Style="width: 150px;">操作</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="源类型">
                                <MudText Typo="Typo.body2" Class="font-monospace">@context.SourceType</MudText>
                            </MudTd>
                            <MudTd DataLabel="目标类型">
                                <MudText Typo="Typo.body2" Class="font-monospace">@context.DestinationType</MudText>
                            </MudTd>
                            <MudTd DataLabel="操作">
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Primary" 
                                          Size="Size.Small"
                                          StartIcon="@Icons.Material.Filled.Code"
                                          OnClick="@(() => ShowMapperCode(context))">
                                    查看代码
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        }
        else if (!_loading && _mapperData is not null)
        {
            <MudAlert Severity="Severity.Info" Class="mt-4">
                <MudText>没有找到任何Mapper映射配置</MudText>
            </MudAlert>
        }
    </MudStack>
</MudContainer>

<MudDialog @bind-Visible="@_showCodeDialog" Options="@(new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true })">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-2" />
            映射表达式代码
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_selectedMapper is not null)
        {
            <MudStack Spacing="3">
                <MudPaper Class="pa-3" Elevation="1">
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">源类型:</MudText>
                    <MudText Typo="Typo.body2" Class="font-monospace">@_selectedMapper.SourceType</MudText>
                </MudPaper>
                
                <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Style="align-self: center;" />
                
                <MudPaper Class="pa-3" Elevation="1">
                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">目标类型:</MudText>
                    <MudText Typo="Typo.body2" Class="font-monospace">@_selectedMapper.DestinationType</MudText>
                </MudPaper>
                
                <MudDivider />
                
                @if (!string.IsNullOrEmpty(_selectedMapper.MapExpression))
                {
                    <MudMarkdown Value="@($"```csharp\n{_selectedMapper.MapExpression}\n```")" />
                }
                else
                {
                    <MudAlert Severity="Severity.Warning">无映射表达式</MudAlert>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showCodeDialog = false)">关闭</MudButton>
    </DialogActions>
</MudDialog>

<MoMarkdownThemeManager />

@code {
    public const string MAPPER_DEBUG_URL = "/mapper-debug";
    
    private bool _loading = false;
    private MapperStatusResponse? _mapperData;
    private bool _showCodeDialog = false;
    private MapperInfo? _selectedMapper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }
    
    private async Task LoadDataAsync()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            if ((await MapperService.GetMapperStatusAsync()).IsFailed(out var error, out var data))
            {
                Snackbar.Add($"加载Mapper数据失败: {error}", Severity.Error);
                return;
            }

            _mapperData = data;
            Snackbar.Add($"成功加载 {data.Count} 个映射配置", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载数据时发生异常: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private void ShowMapperCode(MapperInfo mapper)
    {
        _selectedMapper = mapper;
        _showCodeDialog = true;
    }
}