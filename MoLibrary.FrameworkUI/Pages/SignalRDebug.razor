@attribute [Route(SIGNALR_DEBUG_URL)]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@using MoLibrary.SignalR.Modules
@using MudBlazor
@using System.Text.Json
@using MoLibrary.SignalR.Controllers
@using MoLibrary.SignalR.Models
@using System.Net.Http.Json
@using MoLibrary.Tool.MoResponse
@inject ISnackbar SnackBar
@inject IJSRuntime JSRuntime
@inject IOptions<ModuleSignalROption> SignalROptions
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>SignalR调试</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
        SignalR调试
    </MudText>

    <!-- 连接配置 -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">连接配置</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="accessToken" 
                            Label="Access Token" 
                            Variant="Variant.Outlined"
                            HelperText="输入用于SignalR连接的访问令牌" />
            </MudItem>
            <MudItem xs="12">
                <MudSelect @bind-Value="selectedHubRoute" 
                         Label="Hub URL" 
                         Variant="Variant.Outlined"
                         HelperText="选择要连接的SignalR Hub"
                         T="string">
                    @foreach (var hub in availableHubs)
                    {
                        <MudSelectItem Value="@hub.Route">@hub.Source (@hub.Route)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         OnClick="ConnectAsync"
                         Disabled="isConnecting || string.IsNullOrEmpty(selectedHubRoute)">
                    @if (isConnecting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">连接中...</MudText>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Cable" />
                        <MudText Class="ms-2">@(IsConnected ? "重新连接" : "连接")</MudText>
                    }
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Secondary" 
                         OnClick="DisconnectAsync"
                         Disabled="!IsConnected"
                         Class="ms-2">
                    <MudIcon Icon="@Icons.Material.Filled.PowerOff" />
                    <MudText Class="ms-2">断开连接</MudText>
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Info" 
                         OnClick="LoadHubMethodsAsync"
                         Class="ms-2">
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" />
                    <MudText Class="ms-2">刷新Hub信息</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- 连接状态 -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">连接状态</MudText>
        <MudChip Color="@GetConnectionStatusColor()" 
                Label="true" 
                Size="Size.Medium"
                T="string">
            @connectionStatus
        </MudChip>
        @if (!string.IsNullOrEmpty(connectionId))
        {
            <MudText Typo="Typo.body2" Class="mt-2">
                连接ID: @connectionId
            </MudText>
        }
        @if (!string.IsNullOrEmpty(selectedHubRoute))
        {
            <MudText Typo="Typo.body2" Class="mt-1">
                当前Hub: @selectedHubRoute
            </MudText>
        }
    </MudPaper>

    <!-- Hub方法监听 -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">Hub方法监听</MudText>
        @if (currentHubMethods.Any())
        {
            <MudGrid>
                @foreach (var method in currentHubMethods)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCheckBox Checked="@method.IsListening" 
                                   Label="@method.DisplayName"
                                   Color="Color.Primary"
                                   T="bool"
                                   CheckedChanged="@((bool isChecked) => ToggleMethodListener(method, isChecked))" />
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudAlert Severity="Severity.Info">请先连接到Hub以加载可用的方法</MudAlert>
        }
    </MudPaper>

    <!-- 方法调用 -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">方法调用</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudSelect Value="@selectedMethodName" 
                         Label="选择方法" 
                         Variant="Variant.Outlined"
                         T="string"
                         ValueChanged="OnMethodSelectionChanged">
                    @foreach (var method in currentHubMethods)
                    {
                        <MudSelectItem Value="@method.Name">@method.DisplayName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                @if (selectedMethod != null && selectedMethod.Args.Any())
                {
                    <MudText Typo="Typo.h6" Class="mb-2">参数设置:</MudText>
                    @foreach (var arg in selectedMethod.Args)
                    {
                        <MudTextField @bind-Value="methodParameters[arg.Name]" 
                                    Label="@($"{arg.Name} ({arg.Type})")" 
                                    Variant="Variant.Outlined"
                                    Class="mb-2"
                                    HelperText="@($"参数类型: {arg.Type}")" />
                    }
                }
                else if (selectedMethod != null)
                {
                    <MudAlert Severity="Severity.Info">该方法无需参数</MudAlert>
                }
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         OnClick="InvokeMethodAsync"
                         Disabled="!IsConnected || string.IsNullOrWhiteSpace(selectedMethodName)">
                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" />
                    <MudText Class="ms-2">调用方法</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- 消息发送 (保留原有的简单消息发送功能) -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">快速消息发送</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="userName" 
                            Label="用户名" 
                            Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="message" 
                            Label="消息内容" 
                            Variant="Variant.Outlined"
                            OnKeyDown="OnMessageKeyDown" />
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Success" 
                         OnClick="SendMessageAsync"
                         Disabled="!IsConnected || string.IsNullOrWhiteSpace(message)">
                    <MudIcon Icon="@Icons.Material.Filled.Send" />
                    <MudText Class="ms-2">发送消息</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- 消息列表 -->
    <MudPaper Class="pa-4" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-3">消息日志</MudText>
        <MudButton Variant="Variant.Outlined" 
                 Color="Color.Warning" 
                 OnClick="ClearMessages"
                 Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.Clear" />
            <MudText Class="ms-2">清空日志</MudText>
        </MudButton>
        
        <MudVirtualize Items="messages" Context="msg" ItemSize="60">
            <div class="d-flex align-center pa-2 @(msg.IsError ? "mud-error-text" : "")">
                <MudIcon Icon="@GetMessageIcon(msg.Type)" 
                        Color="@GetMessageColor(msg.Type)" 
                        Class="mr-3" />
                <div class="flex-grow-1">
                    <MudText Typo="Typo.body2">
                        <strong>[@msg.Timestamp.ToString("HH:mm:ss")]</strong> @msg.Content
                    </MudText>
                    @if (!string.IsNullOrEmpty(msg.Details))
                    {
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                            @msg.Details
                        </MudText>
                    }
                </div>
            </div>
            <MudDivider />
        </MudVirtualize>
    </MudPaper>
</MudContainer>

@code {
    public const string SIGNALR_DEBUG_URL = "/signalr-debug";

    private HubConnection? hubConnection;
    private string accessToken = "";
    private string selectedHubRoute = "";
    private string connectionStatus = "未连接";
    private string connectionId = "";
    private bool isConnecting = false;
    private string userName = "";
    private string message = "";
    private string selectedMethodName = "";
    
    private readonly List<SignalRServerGroupInfo> availableHubs = new();
    private readonly List<HubMethodInfo> currentHubMethods = new();
    private readonly Dictionary<string, string> methodParameters = new();
    private readonly List<SignalRMessage> messages = new();

    private HubMethodInfo? selectedMethod => currentHubMethods.FirstOrDefault(m => m.Name == selectedMethodName);

    /// <summary>
    /// 判断是否已连接
    /// </summary>
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// 组件初始化
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 使用配置中的默认AccessToken
        accessToken = SignalROptions.Value.DefaultAccessToken ?? "";
        await LoadHubMethodsAsync();
    }

    /// <summary>
    /// 加载Hub方法信息
    /// </summary>
    private async Task LoadHubMethodsAsync()
    {
        try
        {
            var controllerRoute = SignalROptions.Value.GetControllerRouteTemplate<ModuleSignalRController>();
            
            // 使用NavigationManager.BaseUri确保有正确的基础地址
            var baseUri = NavigationManager.BaseUri.TrimEnd('/');
            var apiUrl = $"{baseUri}/{controllerRoute.TrimStart('/')}/hubs";
            
            AddMessage("系统", $"正在加载Hub信息: {apiUrl}", MessageType.Info);
            
            var response = await HttpClient.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadFromJsonAsync<Res<List<SignalRServerGroupInfo>>>();
                if (apiResponse != null)
                {
                    if (apiResponse.IsFailed(out var error, out var hubGroups))
                    {
                        var errorMessage = error?.Message ?? "响应失败";
                        AddMessage("错误", $"加载Hub信息失败: {errorMessage}", MessageType.Error);
                        return;
                    }
                    availableHubs.Clear();
                    availableHubs.AddRange(hubGroups);
                        
                    // 如果当前没有选择Hub，默认选择第一个
                    if (string.IsNullOrEmpty(selectedHubRoute) && availableHubs.Any())
                    {
                        selectedHubRoute = availableHubs.First().Route;
                    }
                        
                    UpdateCurrentHubMethods();
                    AddMessage("系统", $"成功加载 {availableHubs.Count} 个Hub信息", MessageType.Success);
                }
                else
                {
                    AddMessage("错误", "无法解析响应数据", MessageType.Error);
                }
            }
            else
            {
                AddMessage("错误", $"加载Hub信息失败: {response.StatusCode} - {response.ReasonPhrase}", MessageType.Error);
            }
        }
        catch (Exception ex)
        {
            AddMessage("错误", $"加载Hub信息时发生异常: {ex.Message}", MessageType.Error);
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// 更新当前Hub的方法列表
    /// </summary>
    private void UpdateCurrentHubMethods()
    {
        currentHubMethods.Clear();
        
        var currentHub = availableHubs.FirstOrDefault(h => h.Route == selectedHubRoute);
        if (currentHub != null)
        {
            foreach (var method in currentHub.Methods)
            {
                currentHubMethods.Add(new HubMethodInfo
                {
                    Name = method.Name,
                    DisplayName = $"{method.Desc} ({method.Name})",
                    Args = method.Args,
                    IsListening = true // 默认监听所有方法
                });
            }
        }
        
        // 清除旧的参数
        methodParameters.Clear();
    }

    /// <summary>
    /// 连接到SignalR Hub
    /// </summary>
    private async Task ConnectAsync()
    {
        try
        {
            isConnecting = true;
            
            if (hubConnection is not null)
            {
                await hubConnection.DisposeAsync();
            }

            // 构建正确的Hub URL
            var baseUri = NavigationManager.BaseUri.TrimEnd('/');
            var hubRoute = selectedHubRoute.StartsWith("/") ? selectedHubRoute : $"/{selectedHubRoute}";
            var hubUrl = $"{baseUri}{hubRoute}";
            
            var hubConnectionBuilder = new HubConnectionBuilder()
                .WithUrl(hubUrl, options =>
                {
                    if (!string.IsNullOrWhiteSpace(accessToken))
                    {
                        options.AccessTokenProvider = () => Task.FromResult(accessToken);
                    }
                })
                .WithAutomaticReconnect();

            hubConnection = hubConnectionBuilder.Build();

            // 注册Hub方法
            RegisterHubMethods();

            // 连接状态变化处理
            hubConnection.Closed += OnConnectionClosed;
            hubConnection.Reconnecting += OnReconnecting;
            hubConnection.Reconnected += OnReconnected;

            await hubConnection.StartAsync();
            
            connectionStatus = "已连接";
            connectionId = hubConnection.ConnectionId ?? "";
            
            AddMessage("系统", $"成功连接到SignalR Hub: {hubUrl}", MessageType.Success);
            SnackBar.Add("SignalR连接成功", Severity.Success);
        }
        catch (Exception ex)
        {
            connectionStatus = "连接失败";
            connectionId = "";
            AddMessage("系统", $"连接失败: {ex.Message}", MessageType.Error);
            SnackBar.Add($"连接失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            isConnecting = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 断开连接
    /// </summary>
    private async Task DisconnectAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }
        
        connectionStatus = "已断开";
        connectionId = "";
        AddMessage("系统", "SignalR连接已断开", MessageType.Info);
        SnackBar.Add("SignalR连接已断开", Severity.Info);
        StateHasChanged();
    }

    /// <summary>
    /// 发送消息
    /// </summary>
    private async Task SendMessageAsync()
    {
        if (hubConnection is null || !IsConnected || string.IsNullOrWhiteSpace(message))
            return;

        try
        {
            await hubConnection.SendAsync("ReceiveTestMessage", userName, message);
            AddMessage("发送", $"{userName}: {message}", MessageType.Sent);
            message = "";
        }
        catch (Exception ex)
        {
            AddMessage("错误", $"发送消息失败: {ex.Message}", MessageType.Error);
            SnackBar.Add($"发送消息失败: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// 调用方法
    /// </summary>
    private async Task InvokeMethodAsync()
    {
        if (hubConnection is null || !IsConnected || string.IsNullOrWhiteSpace(selectedMethodName) || selectedMethod == null)
            return;

        try
        {
            var args = new List<object>();
            
            foreach (var arg in selectedMethod.Args)
            {
                if (methodParameters.TryGetValue(arg.Name, out var paramValue))
                {
                    var convertedValue = ConvertArgument(paramValue, arg.Type);
                    args.Add(convertedValue);
                }
                else
                {
                    // 如果没有提供参数值，根据类型提供默认值
                    args.Add(GetDefaultValue(arg.Type));
                }
            }

            await hubConnection.SendAsync(selectedMethodName, args.ToArray());
            
            var argsDisplay = args.Any() ? $"参数: {string.Join(", ", args.Select(a => a?.ToString() ?? "null"))}" : "无参数";
            AddMessage("调用", $"方法 {selectedMethodName} 调用成功 - {argsDisplay}", MessageType.Success);
            SnackBar.Add($"方法 {selectedMethodName} 调用成功", Severity.Success);
        }
        catch (Exception ex)
        {
            AddMessage("错误", $"调用方法失败: {ex.Message}", MessageType.Error);
            SnackBar.Add($"调用方法失败: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// 方法选择变化处理
    /// </summary>
    private void OnMethodSelectionChanged(string methodName)
    {
        selectedMethodName = methodName;
        methodParameters.Clear();
        
        if (selectedMethod != null)
        {
            foreach (var arg in selectedMethod.Args)
            {
                methodParameters[arg.Name] = "";
            }
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// 注册Hub方法
    /// </summary>
    private void RegisterHubMethods()
    {
        if (hubConnection is null) return;

        foreach (var method in currentHubMethods.Where(m => m.IsListening))
        {
            RegisterSingleHubMethod(method);
        }
    }

    /// <summary>
    /// 注册单个Hub方法
    /// </summary>
    private void RegisterSingleHubMethod(HubMethodInfo method)
    {
        if (hubConnection is null) return;

        // 使用简化的动态监听方式，类似JavaScript中的...args
        var parameterTypes = method.Args.Select(arg => GetClrType(arg.Type)).ToArray();
        
        hubConnection.On(method.Name, parameterTypes, (args) =>
        {
            var argsDisplay = args?.Length > 0 
                ? string.Join(", ", args.Select(arg => arg?.ToString() ?? "null"))
                : "无参数";
            
            AddMessage("接收", $"{method.Name}: {argsDisplay}", MessageType.Received);
            return InvokeAsync(StateHasChanged);
        });
    }

    /// <summary>
    /// 获取CLR类型
    /// </summary>
    private Type GetClrType(string typeName)
    {
        return typeName.ToLower() switch
        {
            "string" => typeof(string),
            "boolean" => typeof(bool),
            "int32" or "int" => typeof(int),
            "int64" or "long" => typeof(long),
            "double" => typeof(double),
            "decimal" => typeof(decimal),
            "datetime" => typeof(DateTime),
            _ => typeof(object)
        };
    }

    /// <summary>
    /// 切换方法监听
    /// </summary>
    private void ToggleMethodListener(HubMethodInfo method, bool isListening)
    {
        method.IsListening = isListening;
        
        if (hubConnection != null)
        {
            if (isListening)
            {
                RegisterSingleHubMethod(method);
                AddMessage("系统", $"开始监听方法: {method.Name}", MessageType.Info);
            }
            else
            {
                // 简化的取消监听方式
                hubConnection.Remove(method.Name);
                AddMessage("系统", $"停止监听方法: {method.Name}", MessageType.Info);
            }
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// 消息输入框键盘事件
    /// </summary>
    private async Task OnMessageKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessageAsync();
        }
    }

    /// <summary>
    /// 清空消息列表
    /// </summary>
    private void ClearMessages()
    {
        messages.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// 转换参数类型
    /// </summary>
    private object ConvertArgument(string value, string type)
    {
        if (string.IsNullOrWhiteSpace(value))
            return GetDefaultValue(type);

        try
        {
            return type.ToLower() switch
            {
                "string" => value,
                "boolean" => bool.Parse(value),
                "int32" or "int" => int.Parse(value),
                "int64" or "long" => long.Parse(value),
                "double" => double.Parse(value),
                "decimal" => decimal.Parse(value),
                "datetime" => DateTime.Parse(value),
                _ => TryParseJson(value) ?? value
            };
        }
        catch
        {
            return value; // 如果转换失败，返回原始字符串
        }
    }

    /// <summary>
    /// 获取类型默认值
    /// </summary>
    private object GetDefaultValue(string type)
    {
        return type.ToLower() switch
        {
            "string" => "",
            "boolean" => false,
            "int32" or "int" => 0,
            "int64" or "long" => 0L,
            "double" => 0.0,
            "decimal" => 0m,
            "datetime" => DateTime.Now,
            _ => ""
        };
    }

    /// <summary>
    /// 尝试解析JSON
    /// </summary>
    private object? TryParseJson(string value)
    {
        try
        {
            return JsonSerializer.Deserialize<object>(value);
        }
        catch
        {
            return null;
        }
    }

    /// <summary>
    /// 添加消息到列表
    /// </summary>
    private void AddMessage(string source, string content, MessageType type)
    {
        messages.Insert(0, new SignalRMessage
        {
            Source = source,
            Content = content,
            Type = type,
            Timestamp = DateTime.Now,
            IsError = type == MessageType.Error
        });
        
        // 限制消息数量
        if (messages.Count > 1000)
        {
            messages.RemoveAt(messages.Count - 1);
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// 获取连接状态颜色
    /// </summary>
    private Color GetConnectionStatusColor()
    {
        return connectionStatus switch
        {
            "已连接" => Color.Success,
            "连接中" => Color.Warning,
            "重连中" => Color.Warning,
            _ => Color.Error
        };
    }

    /// <summary>
    /// 获取消息图标
    /// </summary>
    private string GetMessageIcon(MessageType type)
    {
        return type switch
        {
            MessageType.Sent => Icons.Material.Filled.Send,
            MessageType.Received => Icons.Material.Filled.Inbox,
            MessageType.System => Icons.Material.Filled.Info,
            MessageType.Success => Icons.Material.Filled.CheckCircle,
            MessageType.Error => Icons.Material.Filled.Error,
            _ => Icons.Material.Filled.Message
        };
    }

    /// <summary>
    /// 获取消息颜色
    /// </summary>
    private Color GetMessageColor(MessageType type)
    {
        return type switch
        {
            MessageType.Sent => Color.Primary,
            MessageType.Received => Color.Secondary,
            MessageType.System => Color.Info,
            MessageType.Success => Color.Success,
            MessageType.Error => Color.Error,
            _ => Color.Default
        };
    }

    /// <summary>
    /// 连接关闭处理
    /// </summary>
    private Task OnConnectionClosed(Exception? exception)
    {
        connectionStatus = "连接已关闭";
        connectionId = "";
        AddMessage("系统", exception?.Message ?? "连接已关闭", MessageType.Error);
        return InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 重连中处理
    /// </summary>
    private Task OnReconnecting(Exception? exception)
    {
        connectionStatus = "重连中";
        AddMessage("系统", "正在重连...", MessageType.Info);
        return InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 重连成功处理
    /// </summary>
    private Task OnReconnected(string? connectionId)
    {
        connectionStatus = "已连接";
        this.connectionId = connectionId ?? "";
        AddMessage("系统", "重连成功", MessageType.Success);
        return InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 组件销毁
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    /// <summary>
    /// Hub方法信息
    /// </summary>
    private class HubMethodInfo
    {
        public string Name { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public List<SignalRMethodParameter> Args { get; set; } = [];
        public bool IsListening { get; set; }
    }

    /// <summary>
    /// SignalR消息模型
    /// </summary>
    private class SignalRMessage
    {
        public string Source { get; set; } = "";
        public string Content { get; set; } = "";
        public string Details { get; set; } = "";
        public MessageType Type { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsError { get; set; }
    }

    /// <summary>
    /// 消息类型枚举
    /// </summary>
    private enum MessageType
    {
        Sent,
        Received,
        System,
        Success,
        Error,
        Info
    }
} 