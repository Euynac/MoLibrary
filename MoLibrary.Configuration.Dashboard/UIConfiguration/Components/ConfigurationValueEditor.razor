@using MoLibrary.Configuration.Model
@using MudBlazor
@using System.Text.Json

<div class="configuration-value-editor">
    @* 首先检查SpecialType，它优先于BasicType *@
    @if (OptionItem?.SpecialType == EOptionItemValueSpecialType.Array)
    {
        <ConfigurationArrayEditor Value="@Value" 
                                  ValueChanged="@OnValueChanged" 
                                  OptionItem="@OptionItem" />
    }
    else if (OptionItem?.SpecialType == EOptionItemValueSpecialType.Dict)
    {
        <ConfigurationDictEditor Value="@Value" 
                                 ValueChanged="@OnValueChanged" 
                                 OptionItem="@OptionItem" />
    }
    @* 如果不是复合类型，则根据BasicType选择组件 *@
    else if (OptionItem?.Type == EOptionItemValueBasicType.Object && OptionItem.SubStructure != null)
    {
        <ConfigurationObjectEditor Value="@Value" 
                                   ValueChanged="@OnValueChanged" 
                                   SubStructure="@OptionItem.SubStructure" />
    }
    else
    {
        <ConfigurationBasicTypeEditor Type="@(OptionItem?.Type ?? EOptionItemValueBasicType.String)"
                                      Value="@Value"
                                      ValueChanged="@OnValueChanged"
                                      Label="@(OptionItem?.Title ?? "")"
                                      HelperText="@OptionItem?.Desc"
                                      RegexPattern="@OptionItem?.RegexPattern"
                                      IsNullable="@(OptionItem?.IsNullable ?? false)" />
    }

    @if (OptionItem?.IsOffline == true)
    {
        <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="mt-2">
            <MudIcon Icon="@Icons.Material.Filled.RestartAlt" Size="Size.Small" Class="mr-1" />
            离线参数 - 需重启服务生效
        </MudChip>
    }
</div>

@code {
    [Parameter] public DtoOptionItem? OptionItem { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object?> ValueChanged { get; set; }

    private async Task OnValueChanged(object? newValue)
    {
        await ValueChanged.InvokeAsync(newValue);
    }
}