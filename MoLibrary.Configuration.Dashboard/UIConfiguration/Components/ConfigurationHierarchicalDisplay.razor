@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MudBlazor
@using System.Text.Json
@using System.Text.RegularExpressions

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    <!-- 搜索和控制区域 -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="searchKeyword" 
                         Label="搜索配置项" 
                         Variant="Variant.Outlined"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         OnAdornmentClick="() => StateHasChanged()"
                         Immediate="true"
                         DebounceInterval="300"
                         OnDebounceIntervalElapsed="() => StateHasChanged()" />
        </MudItem>
        <MudItem xs="12" md="6" Class="d-flex align-center justify-end">
            <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.ExpandMore" OnClick="ExpandAll">全部展开</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.ExpandLess" OnClick="CollapseAll">全部折叠</MudButton>
            </MudButtonGroup>
        </MudItem>
    </MudGrid>
    
    @foreach (var domain in FilteredConfigs)
    {
        <MudCard Class="mb-4" Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Domain" Class="mr-2" />
                        <MudText Typo="Typo.h6">@domain.Title</MudText>
                    </div>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @foreach (var service in domain.Children)
                {
                    <MudExpansionPanels Class="mb-3">
                        <MudExpansionPanel @bind-IsExpanded="expandedStates[GetPanelKey(domain.Title, service.Title)]">
                            <TitleContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Apps" Class="mr-2" />
                                    <MudText>@service.Title</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                @foreach (var config in service.Children)
                                {
                                    <MudCard Class="mb-2" Elevation="1">
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
                                                    <MudText Typo="Typo.h6">@config.Title</MudText>
                                                </div>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudList T="string" Dense="true">
                                                @foreach (var item in config.Items)
                                                {
                                                    <MudListItem>
                                                        <div class="d-flex align-center justify-space-between w-100">
                                                            <div class="flex-grow-1">
                                                                <div class="d-flex align-center">
                                                                    <MudIcon Icon="@GetOptionIcon(item)" Size="Size.Small" Class="mr-2" />
                                                                    <div>
                                                                        <MudText Typo="Typo.body2">@item.Title</MudText>
                                                                        <MudText Typo="Typo.caption" Class="text-muted">@item.Desc</MudText>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="d-flex align-center gap-2">
                                                                @if (!item.IsOffline)
                                                                {
                                                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Text="在线" />
                                                                }
                                                                else
                                                                {
                                                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Text="离线" />
                                                                }
                                                                <ConfigurationValueDisplay OptionItem="item" />
                                                                <MudButton Size="Size.Small" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Edit" 
                                                                           OnClick="() => OpenEditDialog(item, config.AppId)">编辑</MudButton>
                                                            </div>
                                                        </div>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

<MudDialog Visible="isEditDialogOpen" VisibleChanged="OnDialogVisibilityChanged" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">编辑配置项</MudText>
    </TitleContent>
    <DialogContent>
        @if (editingItem != null)
        {
            <div class="mb-4">
                <MudText Typo="Typo.body2" Class="mb-2"><strong>配置项:</strong> @editingItem.Title</MudText>
                <MudText Typo="Typo.caption" Class="mb-2">@editingItem.Desc</MudText>
                <MudText Typo="Typo.caption" Class="mb-2"><strong>Key:</strong> @editingItem.Key</MudText>
                <MudText Typo="Typo.caption" Class="mb-2"><strong>当前值:</strong> @JsonSerializer.Serialize(editingItem.Value)</MudText>
            </div>
            <ConfigurationValueEditor OptionItem="editingItem" @bind-Value="editValue" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseEditDialog">取消</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveConfiguration">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public List<DtoDomainConfigs> Configs { get; set; } = [];
    [Parameter] public EventCallback<DtoUpdateConfig> OnConfigUpdate { get; set; }
    
    private string searchKeyword = "";
    private Dictionary<string, bool> expandedStates = new();
    
    private List<DtoDomainConfigs> FilteredConfigs => 
        string.IsNullOrWhiteSpace(searchKeyword) ? Configs : FilterConfigs();

    private bool isEditDialogOpen = false;
    private DtoOptionItem? editingItem;
    private string? editingAppId;
    private object? editValue;
    
    protected override void OnParametersSet()
    {
        // 初始化展开状态
        foreach (var domain in Configs)
        {
            foreach (var service in domain.Children)
            {
                var key = GetPanelKey(domain.Title, service.Title);
                if (!expandedStates.ContainsKey(key))
                {
                    expandedStates[key] = false; // 默认折叠
                }
            }
        }
    }
    
    private string GetPanelKey(string domainTitle, string serviceTitle)
    {
        return $"{domainTitle}_{serviceTitle}";
    }
    
    private List<DtoDomainConfigs> FilterConfigs()
    {
        var keyword = searchKeyword.ToLowerInvariant();
        var filtered = new List<DtoDomainConfigs>();
        
        foreach (var domain in Configs)
        {
            var filteredServices = new List<DtoServiceConfigs>();
            
            foreach (var service in domain.Children)
            {
                var filteredConfigs = new List<DtoConfig>();
                
                foreach (var config in service.Children)
                {
                    var filteredItems = config.Items.Where(item =>
                        item.Title.ToLowerInvariant().Contains(keyword) ||
                        item.Key.ToLowerInvariant().Contains(keyword) ||
                        (item.Desc?.ToLowerInvariant().Contains(keyword) ?? false) ||
                        (item.Value?.ToString()?.ToLowerInvariant().Contains(keyword) ?? false)
                    ).ToList();
                    
                    if (filteredItems.Any())
                    {
                        filteredConfigs.Add(new DtoConfig
                        {
                            Title = config.Title,
                            AppId = config.AppId,
                            Items = filteredItems
                        });
                    }
                }
                
                if (filteredConfigs.Any())
                {
                    filteredServices.Add(new DtoServiceConfigs
                    {
                        Title = service.Title,
                        Children = filteredConfigs
                    });
                }
            }
            
            if (filteredServices.Any())
            {
                filtered.Add(new DtoDomainConfigs
                {
                    Title = domain.Title,
                    Children = filteredServices
                });
            }
        }
        
        return filtered;
    }
    
    private void ExpandAll()
    {
        foreach (var key in expandedStates.Keys.ToList())
        {
            expandedStates[key] = true;
        }
        StateHasChanged();
    }
    
    private void CollapseAll()
    {
        foreach (var key in expandedStates.Keys.ToList())
        {
            expandedStates[key] = false;
        }
        StateHasChanged();
    }

    private readonly DialogOptions dialogOptions = new()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    public class TreeNode
    {
        public NodeType Type { get; set; }
        public object Data { get; set; } = null!;
    }

    public enum NodeType
    {
        Domain,
        Service,
        Config,
        OptionItem
    }

    private string GetOptionIcon(DtoOptionItem item)
    {
        return item.Type switch
        {
            EOptionItemValueBasicType.Boolean => Icons.Material.Filled.ToggleOn,
            EOptionItemValueBasicType.Numeric => Icons.Material.Filled.Numbers,
            EOptionItemValueBasicType.String => Icons.Material.Filled.TextFields,
            EOptionItemValueBasicType.DateTime => Icons.Material.Filled.Schedule,
            EOptionItemValueBasicType.TimeSpan => Icons.Material.Filled.Timer,
            EOptionItemValueBasicType.Enum => Icons.Material.Filled.List,
            EOptionItemValueBasicType.Object => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.Settings
        };
    }

    private void OpenEditDialog(DtoOptionItem item, string appId)
    {
        try
        {
            editingItem = item;
            editingAppId = appId;
            editValue = item.Value;
            isEditDialogOpen = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"编辑对话框打开失败: {ex.Message}");
        }
    }

    private void CloseEditDialog()
    {
        isEditDialogOpen = false;
        editingItem = null;
        editingAppId = null;
        editValue = null;
        StateHasChanged();
    }
    
    private void OnDialogVisibilityChanged(bool isVisible)
    {
        isEditDialogOpen = isVisible;
        if (!isVisible)
        {
            CloseEditDialog();
        }
    }

    private async Task SaveConfiguration()
    {
        if (editingItem != null && editingAppId != null)
        {
            var updateRequest = new DtoUpdateConfig
            {
                AppId = editingAppId,
                Key = editingItem.Key,
                Value = JsonSerializer.SerializeToNode(editValue)
            };

            await OnConfigUpdate.InvokeAsync(updateRequest);
            CloseEditDialog();
        }
    }
}