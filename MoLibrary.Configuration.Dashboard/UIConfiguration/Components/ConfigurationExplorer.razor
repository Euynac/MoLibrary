@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MudBlazor
@using System.Text.Json
@using System.Text.RegularExpressions

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    <!-- 搜索区域和操作按钮 -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="searchKeyword" 
                         Label="搜索配置项" 
                         Variant="Variant.Outlined"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         OnAdornmentClick="() => StateHasChanged()"
                         Immediate="true"
                         DebounceInterval="300"
                         OnDebounceIntervalElapsed="() => StateHasChanged()" />
        </MudItem>
        <MudItem xs="12" md="6" Class="d-flex justify-end align-center">
            @if (changeTracker.ModifiedItems.Any())
            {
                <MudBadge Content="@changeTracker.ModifiedItems.Count" Color="Color.Warning" Class="mr-2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Save"
                              OnClick="OpenSaveConfirmationDialog"
                              Disabled="@isSaving">
                        保存修改
                    </MudButton>
                </MudBadge>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="@Icons.Material.Filled.Undo"
                          OnClick="ClearAllChanges"
                          Class="ml-2">
                    撤销所有
                </MudButton>
            }
        </MudItem>
    </MudGrid>
    
    <!-- 三列布局 -->
    <MudGrid Style="height: 70vh;">
        <!-- 第一列：领域和服务导航 -->
        <MudItem xs="3">
            <MudPaper Class="pa-2" Style="height: 100%; overflow-y: auto;">
                <MudText Typo="Typo.h6" Class="mb-3">配置导航</MudText>
                <MudNavMenu>
                    @foreach (var domain in FilteredConfigs)
                    {
                        <div class="mb-2">
                            <MudNavGroup Title="@domain.Title" Icon="@Icons.Material.Filled.Domain" Expanded="true">
                                @foreach (var service in domain.Children)
                                {
                                    <MudNavLink OnClick="() => SelectService(domain, service)" 
                                               Icon="@Icons.Material.Filled.Apps" 
                                               Class="@(selectedService == service ? "mud-nav-link-active" : "")">
                                        @service.Title
                                    </MudNavLink>
                                }
                            </MudNavGroup>
                        </div>
                    }
                </MudNavMenu>
            </MudPaper>
        </MudItem>
        
        <!-- 第二列：配置类表格 -->
        <MudItem xs="4">
            <MudPaper Class="pa-2" Style="height: 100%; overflow-y: auto;">
                <MudText Typo="Typo.h6" Class="mb-3">配置类</MudText>
                @if (selectedService != null)
                {
                    <MudTable T="DtoConfig" Items="selectedService.Children" Dense="true" Hover="true" 
                             SelectedItemChanged="SelectConfig" RowClass="cursor-pointer">
                        <HeaderContent>
                            <MudTh>名称</MudTh>
                            <MudTh>类型</MudTh>
                            <MudTh>配置项数</MudTh>
                            <MudTh>最后更新</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="名称">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Class="mr-2" />
                                    <div>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.body2">@context.Title</MudText>
                                            @if (!string.IsNullOrEmpty(context.Desc))
                                            {
                                                <MudTooltip Text="@context.Desc">
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" 
                                                            Color="Color.Primary" Class="ml-1" 
                                                            Style="font-size: 14px;" />
                                                </MudTooltip>
                                            }
                                        </div>
                                        <MudText Typo="Typo.caption" Class="text-muted">@context.Name</MudText>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="类型">
                                <MudText Typo="Typo.caption">@context.Type</MudText>
                            </MudTd>
                            <MudTd DataLabel="配置项数">
                                <MudChip T="string" Size="Size.Small" Color="Color.Info" Text="@context.Items.Count.ToString()" />
                            </MudTd>
                            <MudTd DataLabel="最后更新">
                                <MudText Typo="Typo.caption">
                                    @(context.LastModificationTime?.ToString("MM-dd HH:mm") ?? "未知")
                                </MudText>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Color="Color.Secondary" Class="text-center pa-4">请选择一个服务</MudText>
                }
            </MudPaper>
        </MudItem>
        
        <!-- 第三列：配置项表格 -->
        <MudItem xs="5">
            <MudPaper Class="pa-2" Style="height: 100%; overflow-y: auto;">
                <MudText Typo="Typo.h6" Class="mb-3">配置项</MudText>
                @if (selectedConfig != null)
                {
                    <MudTable T="DtoOptionItem" Items="selectedConfig.Items" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>名称</MudTh>
                            <MudTh>值</MudTh>
                            <MudTh>类型</MudTh>
                            <MudTh>操作</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="名称">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetOptionIcon(context)" Size="Size.Small" Class="mr-2" />
                                    <div>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.body2">@context.Title</MudText>
                                            @if (IsItemModified(context))
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Warning" 
                                                        Text="已修改" Class="ml-2" />
                                            }
                                            @if (!string.IsNullOrEmpty(context.Desc))
                                            {
                                                <MudTooltip Text="@context.Desc">
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" 
                                                            Color="Color.Primary" Class="ml-1" 
                                                            Style="font-size: 14px;" />
                                                </MudTooltip>
                                            }
                                        </div>
                                        <MudText Typo="Typo.caption" Class="text-muted">@context.Name</MudText>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="值" Style="max-width: 200px;">
                                <div class="config-value-container">
                                    @{
                                        var valueDisplay = GetValueDisplay(context.Value);
                                    }
                                    @if (valueDisplay.Length > 30)
                                    {
                                        <MudTooltip Text="@valueDisplay">
                                            <div class="config-value-truncated">
                                                @(valueDisplay.Substring(0, 30))...
                                            </div>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <div class="config-value-normal">
                                            @valueDisplay
                                        </div>
                                    }
                                </div>
                            </MudTd>
                            <MudTd DataLabel="类型">
                                @if (!context.IsOffline)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Text="在线" />
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Text="离线" />
                                }
                            </MudTd>
                            <MudTd DataLabel="操作">
                                <div class="d-flex gap-1">
                                    <MudButton Size="Size.Small" Variant="Variant.Text" 
                                              StartIcon="@Icons.Material.Filled.Edit" 
                                              OnClick="() => OpenEditDialog(context, selectedConfig.AppId)">
                                        编辑
                                    </MudButton>
                                    @if (IsItemModified(context))
                                    {
                                        <MudButton Size="Size.Small" Variant="Variant.Text"
                                                  StartIcon="@Icons.Material.Filled.Undo" 
                                                  Color="Color.Warning"
                                                  OnClick="() => UndoItemChange(context)">
                                            撤销
                                        </MudButton>
                                    }
                                </div>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Color="Color.Secondary" Class="text-center pa-4">请选择一个配置类</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDialog Visible="isEditDialogOpen" VisibleChanged="OnDialogVisibilityChanged" Options="editDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">编辑配置项</MudText>
    </TitleContent>
    <DialogContent>
        @if (editingItem != null)
        {
            <div class="mb-4">
                <MudText Typo="Typo.body2" Class="mb-2"><strong>配置项:</strong> @editingItem.Title</MudText>
                <MudText Typo="Typo.caption" Class="mb-2">@editingItem.Desc</MudText>
                <MudText Typo="Typo.caption" Class="mb-2"><strong>Key:</strong> @editingItem.Key</MudText>
                <MudText Typo="Typo.caption" Class="mb-2"><strong>当前值:</strong> @JsonSerializer.Serialize(editingItem.Value)</MudText>
            </div>
            <ConfigurationValueEditor OptionItem="editingItem" @bind-Value="editValue" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseEditDialog">取消</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveConfiguration">应用修改</MudButton>
    </DialogActions>
</MudDialog>

<!-- 保存确认对话框 -->
<MudDialog Visible="@isSaveConfirmationDialogOpen" VisibleChanged="OnSaveConfirmationDialogChanged" Options="@saveConfirmationDialogOptions">
    <SaveConfirmationDialog ModifiedConfigs="@GetModifiedConfigsGrouped()"
                           OnCancel="CloseSaveConfirmationDialog"
                           OnSave="SaveAllChanges"
                           IsSaving="@isSaving" />
</MudDialog>


@code {
    [Parameter] public List<DtoDomainConfigs> Configs { get; set; } = [];
    [Parameter] public EventCallback<DtoUpdateConfig> OnConfigUpdate { get; set; }
    
    private string searchKeyword = "";
    
    // 选择状态
    private DtoDomainConfigs? selectedDomain;
    private DtoServiceConfigs? selectedService;
    private DtoConfig? selectedConfig;
    
    // 修改跟踪
    private ConfigurationChangeTracker changeTracker = new();
    
    // 保存确认对话框
    private bool isSaveConfirmationDialogOpen = false;
    private bool isSaving = false;
    
    private List<DtoDomainConfigs> FilteredConfigs => 
        string.IsNullOrWhiteSpace(searchKeyword) ? Configs : FilterConfigs();

    private bool isEditDialogOpen = false;
    private DtoOptionItem? editingItem;
    private string? editingAppId;
    private object? editValue;
    
    protected override void OnParametersSet()
    {
        // 如果配置数据发生变化，重置选择状态
        if (selectedService != null && !Configs.Any(d => d.Children.Contains(selectedService)))
        {
            selectedDomain = null;
            selectedService = null;
            selectedConfig = null;
        }
        
        // 只有在原始配置为空时才初始化（避免重复初始化丢失原始值）
        if (!changeTracker.OriginalConfigs.Any())
        {
            InitializeOriginalConfigs();
        }
    }
    
    private void InitializeOriginalConfigs()
    {
        changeTracker.OriginalConfigs.Clear();
        
        foreach (var domain in Configs)
        {
            foreach (var service in domain.Children)
            {
                foreach (var config in service.Children)
                {
                    changeTracker.OriginalConfigs[config.Name] = DeepCloneConfig(config);
                }
            }
        }
    }
    
    private DtoConfig DeepCloneConfig(DtoConfig original)
    {
        var json = JsonSerializer.Serialize(original);
        return JsonSerializer.Deserialize<DtoConfig>(json)!;
    }
    
    private void SelectService(DtoDomainConfigs domain, DtoServiceConfigs service)
    {
        selectedDomain = domain;
        selectedService = service;
        selectedConfig = null; // 重置配置类选择
        StateHasChanged();
    }
    
    private void SelectConfig(DtoConfig config)
    {
        selectedConfig = config;
        StateHasChanged();
    }
    
    private List<DtoDomainConfigs> FilterConfigs()
    {
        var keyword = searchKeyword.ToLowerInvariant();
        var filtered = new List<DtoDomainConfigs>();
        
        foreach (var domain in Configs)
        {
            var filteredServices = new List<DtoServiceConfigs>();
            
            foreach (var service in domain.Children)
            {
                var filteredConfigs = new List<DtoConfig>();
                
                foreach (var config in service.Children)
                {
                    var filteredItems = config.Items.Where(item =>
                        item.Title.ToLowerInvariant().Contains(keyword) ||
                        item.Key.ToLowerInvariant().Contains(keyword) ||
                        (item.Desc?.ToLowerInvariant().Contains(keyword) ?? false) ||
                        (item.Value?.ToString()?.ToLowerInvariant().Contains(keyword) ?? false)
                    ).ToList();
                    
                    if (filteredItems.Any())
                    {
                        filteredConfigs.Add(new DtoConfig
                        {
                            Title = config.Title,
                            Name = config.Name,
                            Type = config.Type,
                            Desc = config.Desc,
                            AppId = config.AppId,
                            Items = filteredItems,
                            Version = config.Version,
                            LastModificationTime = config.LastModificationTime,
                            LastModifierId = config.LastModifierId,
                            Username = config.Username
                        });
                    }
                }
                
                if (filteredConfigs.Any())
                {
                    filteredServices.Add(new DtoServiceConfigs
                    {
                        Title = service.Title,
                        Name = service.Name,
                        AppId = service.AppId,
                        Children = filteredConfigs
                    });
                }
            }
            
            if (filteredServices.Any())
            {
                filtered.Add(new DtoDomainConfigs
                {
                    Title = domain.Title,
                    Name = domain.Name,
                    Children = filteredServices
                });
            }
        }
        
        return filtered;
    }
    
    private string GetValueDisplay(object? value)
    {
        if (value == null) return "null";
        
        if (value is string strValue)
        {
            return strValue;
        }
        
        try
        {
            return JsonSerializer.Serialize(value);
        }
        catch
        {
            return value.ToString() ?? "null";
        }
    }

    private readonly DialogOptions editDialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraLarge,
        FullWidth = true
    };
    
    private readonly DialogOptions saveConfirmationDialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraLarge,
        FullWidth = true
    };

    private string GetOptionIcon(DtoOptionItem item)
    {
        return item.Type switch
        {
            EOptionItemValueBasicType.Boolean => Icons.Material.Filled.ToggleOn,
            EOptionItemValueBasicType.Numeric => Icons.Material.Filled.Numbers,
            EOptionItemValueBasicType.String => Icons.Material.Filled.TextFields,
            EOptionItemValueBasicType.DateTime => Icons.Material.Filled.Schedule,
            EOptionItemValueBasicType.TimeSpan => Icons.Material.Filled.Timer,
            EOptionItemValueBasicType.Enum => Icons.Material.Filled.List,
            EOptionItemValueBasicType.Object => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.Settings
        };
    }

    private void OpenEditDialog(DtoOptionItem item, string appId)
    {
        try
        {
            editingItem = item;
            editingAppId = appId;
            editValue = item.Value;
            isEditDialogOpen = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"编辑对话框打开失败: {ex.Message}");
        }
    }

    private void CloseEditDialog()
    {
        isEditDialogOpen = false;
        editingItem = null;
        editingAppId = null;
        editValue = null;
        StateHasChanged();
    }
    
    private void OnDialogVisibilityChanged(bool isVisible)
    {
        isEditDialogOpen = isVisible;
        if (!isVisible)
        {
            CloseEditDialog();
        }
    }

    private async Task SaveConfiguration()
    {
        if (editingItem != null && editingAppId != null && selectedConfig != null)
        {
            // 确保原始配置已初始化
            if (!changeTracker.OriginalConfigs.ContainsKey(selectedConfig.Name))
            {
                InitializeOriginalConfigs();
            }
            
            // 获取原始配置项
            var originalConfig = changeTracker.OriginalConfigs[selectedConfig.Name];
            var originalItem = originalConfig.Items.FirstOrDefault(i => i.Key == editingItem.Key);
            
            if (originalItem != null)
            {
                // 创建修改后的配置项
                var modifiedItem = DeepCloneOptionItem(editingItem);
                modifiedItem.Value = editValue;
                
                // 跟踪修改
                changeTracker.TrackChange(selectedConfig.Name, originalItem, modifiedItem, editingAppId);
                
                // 更新当前显示的配置项值
                editingItem.Value = editValue;
            }
            
            CloseEditDialog();
            StateHasChanged();
        }
    }
    
    private DtoOptionItem DeepCloneOptionItem(DtoOptionItem original)
    {
        var json = JsonSerializer.Serialize(original);
        return JsonSerializer.Deserialize<DtoOptionItem>(json)!;
    }
    
    private bool IsItemModified(DtoOptionItem item)
    {
        if (selectedConfig == null) return false;
        return changeTracker.IsItemModified(selectedConfig.Name, item.Key);
    }
    
    private void UndoItemChange(DtoOptionItem item)
    {
        if (selectedConfig == null) return;
        
        // 确保原始配置存在
        if (!changeTracker.OriginalConfigs.ContainsKey(selectedConfig.Name))
        {
            return;
        }
        
        // 撤销修改
        changeTracker.UndoChange(selectedConfig.Name, item.Key);
        
        // 恢复原始值
        var originalConfig = changeTracker.OriginalConfigs[selectedConfig.Name];
        var originalItem = originalConfig.Items.FirstOrDefault(i => i.Key == item.Key);
        
        if (originalItem != null)
        {
            item.Value = originalItem.Value;
        }
        
        StateHasChanged();
    }
    
    private void OpenSaveConfirmationDialog()
    {
        // 确保有修改项时才打开对话框
        if (changeTracker.ModifiedItems.Any())
        {
            isSaveConfirmationDialogOpen = true;
        }
    }
    
    private void CloseSaveConfirmationDialog()
    {
        isSaveConfirmationDialogOpen = false;
    }
    
    private void OnSaveConfirmationDialogChanged(bool isVisible)
    {
        isSaveConfirmationDialogOpen = isVisible;
    }
    
    private Dictionary<string, List<ModifiedConfigItem>> GetModifiedConfigsGrouped()
    {
        var grouped = new Dictionary<string, List<ModifiedConfigItem>>();
        
        foreach (var modifiedItem in changeTracker.ModifiedItems.Values)
        {
            if (!grouped.ContainsKey(modifiedItem.ConfigKey))
            {
                grouped[modifiedItem.ConfigKey] = new List<ModifiedConfigItem>();
            }
            grouped[modifiedItem.ConfigKey].Add(modifiedItem);
        }
        
        return grouped;
    }
    
    private async Task SaveAllChanges(Dictionary<string, List<ModifiedConfigItem>> modifiedConfigs)
    {
        isSaving = true;
        StateHasChanged();
        
        try
        {
            // 按配置类分组保存
            foreach (var configGroup in modifiedConfigs)
            {
                var configKey = configGroup.Key;
                var items = configGroup.Value;
                var appId = items.First().AppId;
                
                // 构建配置类级别的更新请求
                var configValue = new Dictionary<string, object?>();
                foreach (var item in items)
                {
                    configValue[item.ModifiedItem.Key] = item.ModifiedItem.Value;
                }
                
                var updateRequest = new DtoUpdateConfig
                {
                    AppId = appId,
                    Key = configKey,
                    Value = JsonSerializer.SerializeToNode(configValue)
                };
                
                await OnConfigUpdate.InvokeAsync(updateRequest);
            }
            
            // 清空修改记录
            changeTracker.Clear();
            CloseSaveConfirmationDialog();
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void ClearAllChanges()
    {
        // 恢复所有修改项的原始值
        foreach (var modifiedItem in changeTracker.ModifiedItems.Values)
        {
            var config = Configs
                .SelectMany(d => d.Children)
                .SelectMany(s => s.Children)
                .First(c => c.Name == modifiedItem.ConfigKey);
                
            var item = config.Items.First(i => i.Key == modifiedItem.ModifiedItem.Key);
            item.Value = modifiedItem.OriginalItem.Value;
        }
        
        changeTracker.Clear();
        StateHasChanged();
    }
}