@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MoLibrary.Configuration.Providers
@using MudBlazor
@using System.Text.Json
@using System.Text.RegularExpressions
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    <!-- 搜索区域和操作按钮 -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="searchKeyword" 
                         Label="搜索配置项" 
                         Variant="Variant.Outlined"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         OnAdornmentClick="() => StateHasChanged()"
                         Immediate="true"
                         DebounceInterval="300"
                         OnDebounceIntervalElapsed="() => StateHasChanged()" />
        </MudItem>
        <MudItem xs="12" md="6" Class="d-flex justify-end align-center">
            @if (stateManager.GetModifiedConfigurations().Any())
            {
                <MudBadge Content="@stateManager.GetModifiedConfigurations().Sum(c => c.ModificationCount)" Color="Color.Warning" Class="mr-2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Save"
                              OnClick="OpenSaveConfirmationDialog"
                              Disabled="@isSaving">
                        保存修改
                    </MudButton>
                </MudBadge>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="@Icons.Material.Filled.Undo"
                          OnClick="ClearAllChanges"
                          Class="ml-2">
                    撤销所有
                </MudButton>
            }
        </MudItem>
    </MudGrid>
    
    <!-- 三列布局 -->
    <MudGrid Class="config-explorer-grid">
        <!-- 第一列：领域和服务导航 -->
        <MudItem xs="3">
            <MudPaper Class="pa-2 config-navigation-panel">
                <MudText Typo="Typo.h6" Class="mb-3">配置导航</MudText>
                <MudNavMenu>
                    @foreach (var domain in FilteredConfigs)
                    {
                        <div class="mb-2">
                            <MudNavGroup Title="@domain.Title" Icon="@Icons.Material.Filled.Domain" Expanded="true">
                                @foreach (var service in domain.Children)
                                {
                                    <MudNavLink OnClick="() => SelectService(domain, service)" 
                                               Icon="@Icons.Material.Filled.Apps" 
                                               Class="@GetServiceNavLinkClass(service)">
                                        @service.Title
                                    </MudNavLink>
                                }
                            </MudNavGroup>
                        </div>
                    }
                </MudNavMenu>
            </MudPaper>
        </MudItem>
        
        <!-- 第二列：配置类表格 -->
        <MudItem xs="4">
            <MudPaper Class="pa-2 config-class-panel">
                <MudText Typo="Typo.h6" Class="mb-3">配置类</MudText>
                @if (selectedService != null)
                {
                    <div class="config-table-wrapper">
                        <MudTable T="DtoConfig" Items="selectedService.Children" Dense="true" Hover="true" 
                                 SelectedItem="selectedConfig" SelectedItemChanged="SelectConfig" 
                                 RowClassFunc="@GetConfigRowClass" 
                                 SelectOnRowClick="true">
                            <HeaderContent>
                            <MudTh>名称</MudTh>
                            <MudTh>类型</MudTh>
                            <MudTh>配置项数</MudTh>
                            <MudTh>最后更新</MudTh>
                            <MudTh>操作</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="名称">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Class="mr-2" />
                                    <div>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.body2">@context.Title</MudText>
                                            @if (!string.IsNullOrEmpty(context.Desc))
                                            {
                                                <MudTooltip Text="@context.Desc">
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" 
                                                            Color="Color.Primary" Class="ml-1" 
                                                            Style="font-size: 14px;" />
                                                </MudTooltip>
                                            }
                                        </div>
                                        <MudText Typo="Typo.caption" Class="text-muted">@context.Name</MudText>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="类型">
                                <MudText Typo="Typo.caption">@context.Type</MudText>
                            </MudTd>
                            <MudTd DataLabel="配置项数">
                                <MudChip T="string" Size="Size.Small" Color="Color.Info" Text="@context.Items.Count.ToString()" />
                            </MudTd>
                            <MudTd DataLabel="最后更新">
                                <MudText Typo="Typo.caption">
                                    @(context.LastModificationTime?.ToString("MM-dd HH:mm") ?? "未知")
                                </MudText>
                            </MudTd>
                            <MudTd DataLabel="操作">
                                <MudTooltip Text="查看配置类历史记录">
                                    <MudIconButton Icon="@Icons.Material.Filled.History" 
                                                  Size="Size.Small"
                                                  Color="Color.Info"
                                                  OnClick="@(() => OpenConfigHistoryDialog(context))" />
                                </MudTooltip>
                            </MudTd>
                        </RowTemplate>
                        </MudTable>
                    </div>
                }
                else
                {
                    <MudText Color="Color.Secondary" Class="text-center pa-4">请选择一个服务</MudText>
                }
            </MudPaper>
        </MudItem>
        
        <!-- 第三列：配置项表格 -->
        <MudItem xs="5">
            <MudPaper Class="pa-2 config-item-panel">
                <MudText Typo="Typo.h6" Class="mb-3">配置项</MudText>
                @if (selectedConfig != null)
                {
                    <MudTable T="DtoOptionItem" Items="selectedConfig.Items" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>名称</MudTh>
                            <MudTh>值</MudTh>
                            <MudTh>类型</MudTh>
                            <MudTh>操作</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="名称">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetOptionIcon(context)" Size="Size.Small" Class="mr-2" />
                                    <div>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.body2">@context.Title</MudText>
                                            @{
                                                var itemViewModel = GetItemViewModel(context);
                                            }
                                            @if (itemViewModel?.IsModified == true)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Warning" 
                                                        Text="已修改" Class="ml-2" />
                                            }
                                            @if (!string.IsNullOrEmpty(context.Desc))
                                            {
                                                <MudTooltip Text="@context.Desc">
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" 
                                                            Color="Color.Primary" Class="ml-1" 
                                                            Style="font-size: 14px;" />
                                                </MudTooltip>
                                            }
                                        </div>
                                        <MudText Typo="Typo.caption" Class="text-muted">@context.Name</MudText>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="值" Style="max-width: 200px;">
                                <div class="config-value-container">
                                    @{
                                        var itemViewModel = GetItemViewModel(context);
                                        var valueDisplay = GetValueDisplay(itemViewModel?.CurrentValue ?? context.Value);
                                    }
                                    @if (valueDisplay.Length > 30)
                                    {
                                        <MudTooltip Text="@valueDisplay">
                                            <div class="config-value-truncated">
                                                @(valueDisplay.Substring(0, 30))...
                                            </div>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <div class="config-value-normal">
                                            @valueDisplay
                                        </div>
                                    }
                                </div>
                            </MudTd>
                            <MudTd DataLabel="类型">
                                @if (!context.IsOffline)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Text="在线" />
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Text="离线" />
                                }
                            </MudTd>
                            <MudTd DataLabel="操作">
                                <div class="d-flex gap-1">
                                    <MudButton Size="Size.Small" Variant="Variant.Text" 
                                              StartIcon="@Icons.Material.Filled.Edit" 
                                              OnClick="async () => await OpenEditDialog(context, selectedConfig.AppId)">
                                        编辑
                                    </MudButton>
                                    @{
                                        var itemViewModel = GetItemViewModel(context);
                                    }
                                    @if (itemViewModel?.IsModified == true)
                                    {
                                        <MudButton Size="Size.Small" Variant="Variant.Text"
                                                  StartIcon="@Icons.Material.Filled.Undo" 
                                                  Color="Color.Warning"
                                                  OnClick="() => UndoItemChange(context)">
                                            撤销
                                        </MudButton>
                                    }
                                </div>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Color="Color.Secondary" Class="text-center pa-4">请选择一个配置类</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- ConfigurationEditor is now opened via IDialogService -->



@code {
    [Parameter] public List<DtoDomainConfigs> Configs { get; set; } = [];
    [Parameter] public EventCallback<DtoUpdateConfig> OnConfigUpdate { get; set; }
    
    private string searchKeyword = "";
    
    // 选择状态
    private DtoDomainConfigs? selectedDomain;
    private DtoServiceConfigs? selectedService;
    private DtoConfig? selectedConfig;
    
    // 状态管理
    private ConfigurationStateManager stateManager = new();
    
    // 保存确认对话框
    private bool isSaveConfirmationDialogOpen = false;
    private bool isSaving = false;
    
    private List<DtoDomainConfigs> FilteredConfigs => 
        string.IsNullOrWhiteSpace(searchKeyword) ? Configs : FilterConfigs();

    private DtoOptionItem? editingItem;
    private string? editingAppId;
    
    private List<DtoDomainConfigs>? _lastConfigs;
    
    protected override void OnParametersSet()
    {
        // 只有在配置数据真正发生变化时才重新初始化状态管理器
        if (_lastConfigs != Configs) 
        {
            _lastConfigs = Configs;
            stateManager.Initialize(Configs);
            
            // 从状态管理器恢复选择状态
            RestoreSelectionFromStateManager();
        }
    }
    
    
    private void SelectService(DtoDomainConfigs domain, DtoServiceConfigs service)
    {
        selectedDomain = domain;
        selectedService = service;
        selectedConfig = null; // 重置配置类选择
        
        // 更新状态管理器
        stateManager.UpdateSelection(domainName: domain.Name, serviceName: service.Name, configName: null);
        
        StateHasChanged();
    }
    
    private void SelectConfig(DtoConfig? config)
    {
        selectedConfig = config;
        
        // 更新状态管理器，传递完整的选择状态
        if (config != null && selectedDomain != null && selectedService != null)
        {
            stateManager.UpdateSelection(domainName: selectedDomain.Name, serviceName: selectedService.Name, configName: config.Name);
        }
        
        StateHasChanged();
    }
    
    private List<DtoDomainConfigs> FilterConfigs()
    {
        var keyword = searchKeyword.ToLowerInvariant();
        var filtered = new List<DtoDomainConfigs>();
        
        foreach (var domain in Configs)
        {
            var filteredServices = new List<DtoServiceConfigs>();
            
            foreach (var service in domain.Children)
            {
                var filteredConfigs = new List<DtoConfig>();
                
                foreach (var config in service.Children)
                {
                    var filteredItems = config.Items.Where(item =>
                        item.Title.ToLowerInvariant().Contains(keyword) ||
                        item.Key.ToLowerInvariant().Contains(keyword) ||
                        (item.Desc?.ToLowerInvariant().Contains(keyword) ?? false) ||
                        (item.Value?.ToString()?.ToLowerInvariant().Contains(keyword) ?? false)
                    ).ToList();
                    
                    if (filteredItems.Any())
                    {
                        filteredConfigs.Add(new DtoConfig
                        {
                            Title = config.Title,
                            Name = config.Name,
                            Type = config.Type,
                            Desc = config.Desc,
                            AppId = config.AppId,
                            Items = filteredItems,
                            Version = config.Version,
                            LastModificationTime = config.LastModificationTime,
                            LastModifierId = config.LastModifierId,
                            Username = config.Username
                        });
                    }
                }
                
                if (filteredConfigs.Any())
                {
                    filteredServices.Add(new DtoServiceConfigs
                    {
                        Title = service.Title,
                        Name = service.Name,
                        AppId = service.AppId,
                        Children = filteredConfigs
                    });
                }
            }
            
            if (filteredServices.Any())
            {
                filtered.Add(new DtoDomainConfigs
                {
                    Title = domain.Title,
                    Name = domain.Name,
                    Children = filteredServices
                });
            }
        }
        
        return filtered;
    }
    
    private string GetValueDisplay(object? value)
    {
        if (value == null) return "null";
        
        if (value is string strValue)
        {
            return strValue;
        }
        
        try
        {
            return JsonSerializer.Serialize(value, JsonFileProviderConventions.JsonSerializerOptions);
        }
        catch
        {
            return value.ToString() ?? "null";
        }
    }

    
    private readonly DialogOptions saveConfirmationDialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraLarge,
        FullWidth = true
    };

    private string GetOptionIcon(DtoOptionItem item)
    {
        return item.Type switch
        {
            EOptionItemValueBasicType.Boolean => Icons.Material.Filled.ToggleOn,
            EOptionItemValueBasicType.Numeric => Icons.Material.Filled.Numbers,
            EOptionItemValueBasicType.String => Icons.Material.Filled.TextFields,
            EOptionItemValueBasicType.DateTime => Icons.Material.Filled.Schedule,
            EOptionItemValueBasicType.TimeSpan => Icons.Material.Filled.Timer,
            EOptionItemValueBasicType.Enum => Icons.Material.Filled.List,
            EOptionItemValueBasicType.Object => Icons.Material.Filled.DataObject,
            _ => Icons.Material.Filled.Settings
        };
    }

    private string GetConfigRowClass(DtoConfig config, int rowNumber)
    {
        var baseClass = "cursor-pointer";
        if (selectedConfig?.Name == config.Name)
        {
            baseClass += " config-selected-row mud-selected";
        }
        return baseClass;
    }
    
    private string GetServiceNavLinkClass(DtoServiceConfigs service)
    {
        return selectedService?.Name == service.Name ? "mud-nav-link-active" : "";
    }

    private async Task OpenEditDialog(DtoOptionItem item, string appId)
    {
        try
        {
            editingItem = item;
            editingAppId = appId;
            
            // 使用 IDialogService 打开编辑对话框
            var parameters = new DialogParameters<ConfigurationEditor>
            {
                { x => x.OnConfigurationUpdated, EventCallback.Factory.Create(this, OnConfigurationUpdated) },
                { x => x.ConfigItem, item },
                { x => x.StateManager, stateManager },
                { x => x.ConfigName, selectedConfig?.Name ?? "" }
            };
            
            var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false
            };
            
            var dialog = await DialogService.ShowAsync<ConfigurationEditor>($"编辑配置 - {item.Title}", parameters, options);
            var result = await dialog.Result;
            
            if (result != null && !result.Canceled)
            {
                // 由于 StateManager 已经处理了更新，只需要刷新界面
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"编辑对话框打开失败: {ex.Message}");
        }
    }


    private void OnConfigurationUpdated()
    {
        // 当 ConfigurationEditor 更新配置后的回调，只需要刷新界面
        StateHasChanged();
    }
    
    
    private ConfigurationItemViewModel? GetItemViewModel(DtoOptionItem item)
    {
        if (selectedConfig == null) return null;
        var configViewModel = stateManager.GetConfiguration(selectedConfig.Name);
        return configViewModel?.Items.FirstOrDefault(i => i.OriginalItem.Key == item.Key);
    }
    
    private void UndoItemChange(DtoOptionItem item)
    {
        if (selectedConfig == null) return;
        
        stateManager.UndoItem(selectedConfig.Name, item.Key);
        StateHasChanged();
    }
    
    private async void OpenSaveConfirmationDialog()
    {
        // 确保有修改项时才打开对话框
        var modifiedConfigs = stateManager.GetModifiedConfigurations();
        if (modifiedConfigs.Any())
        {
            var parameters = new DialogParameters
            {
                ["StateManager"] = stateManager,
                ["IsSaving"] = isSaving
            };
            
            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                CloseOnEscapeKey = false,
                BackdropClick = true,
                CloseButton = false
            };
            
            var dialog = await DialogService.ShowAsync<SaveConfirmationDialog>("保存配置确认", parameters, options);
            var result = await dialog.Result;
            
            if (result is { Canceled: false, Data: List<DtoUpdateConfig> updateRequests})
            {
                await SaveAllChanges(updateRequests);
            }
        }
    }
    
    private void CloseSaveConfirmationDialog()
    {
        isSaveConfirmationDialogOpen = false;
    }
    
    private void OnSaveConfirmationDialogChanged(bool isVisible)
    {
        isSaveConfirmationDialogOpen = isVisible;
    }
    
    
    private async Task SaveAllChanges(List<DtoUpdateConfig> updateRequests)
    {
        isSaving = true;
        StateHasChanged();
        
        try
        {
            // 逐个执行配置类级别的更新请求
            foreach (var updateRequest in updateRequests)
            {
                await OnConfigUpdate.InvokeAsync(updateRequest);
            }
            
            // 清空修改记录
            stateManager.ClearAllModifications();
            CloseSaveConfirmationDialog();
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void ClearAllChanges()
    {
        stateManager.ClearAllModifications();
        StateHasChanged();
    }

    private async Task OpenConfigHistoryDialog(DtoConfig config)
    {
        var parameters = new DialogParameters<ConfigurationHistoryDialog>
        {
            { x => x.ConfigKey, config.Name },
            { x => x.AppId, config.AppId },
            { x => x.DialogTitle, $"配置历史记录 - {config.Title}" }
        };

        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ConfigurationHistoryDialog>($"配置历史记录 - {config.Title}", parameters, options);
    }
    
    /// <summary>
    /// 从状态管理器恢复选择状态
    /// </summary>
    private void RestoreSelectionFromStateManager()
    {
        var selectionState = stateManager.GetSelectionState();
        
        selectedDomain = null;
        selectedService = null;
        selectedConfig = null;
        
        if (!string.IsNullOrEmpty(selectionState.SelectedDomainName))
        {
            selectedDomain = Configs.FirstOrDefault(d => d.Name == selectionState.SelectedDomainName);
            
            if (selectedDomain != null && !string.IsNullOrEmpty(selectionState.SelectedServiceName))
            {
                selectedService = selectedDomain.Children.FirstOrDefault(s => s.Name == selectionState.SelectedServiceName);
                
                if (selectedService != null && !string.IsNullOrEmpty(selectionState.SelectedConfigName))
                {
                    selectedConfig = selectedService.Children.FirstOrDefault(c => c.Name == selectionState.SelectedConfigName);
                }
            }
        }
    }
}