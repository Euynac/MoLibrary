@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Providers
@using MudBlazor
@using System.Text.Json

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">对象编辑器 - @SubStructure?.Title</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (SubStructure?.Items != null)
        {
            @foreach (var item in SubStructure.Items)
            {
                <div class="mb-3">
                    <MudText Typo="Typo.subtitle2" Class="mb-1">@item.Title</MudText>
                    @if (!string.IsNullOrEmpty(item.Desc))
                    {
                        <MudText Typo="Typo.caption" Class="mb-2 text-muted">@item.Desc</MudText>
                    }
                    
                    <ConfigurationBasicTypeEditor Type="@item.Type"
                                                  Value="@GetValue(item.Name)"
                                                  ValueChanged="@((object? v) => SetValue(item.Name, v))"
                                                  Label="@item.Title"
                                                  HelperText="@item.Desc"
                                                  RegexPattern="@item.RegexPattern"
                                                  IsNullable="@item.IsNullable" />
                </div>
            }
        }
        else
        {
            <MudText Typo="Typo.caption" Class="text-muted">无子结构定义</MudText>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public DtoConfig? SubStructure { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object?> ValueChanged { get; set; }

    private Dictionary<string, object> currentValue = [];

    protected override void OnParametersSet()
    {
        // 从传入的Value参数中解析实际的对象值
        if (Value is JsonElement element && element.ValueKind == JsonValueKind.Object)
        {
            currentValue = element.EnumerateObject().ToDictionary(x => x.Name, x => (object)x.Value);
        }
        else if (Value is JsonElement { ValueKind: JsonValueKind.Null } || Value is null)
        {
            // 如果Value为null，创建空字典，后续会根据SubStructure的结构填充默认值
            currentValue = [];
        }
        else
        {
            // 其他情况也创建空字典
            currentValue = [];
        }
    }

    private object? GetValue(string propertyName)
    {
        // 从解析出的实际值中获取指定属性的值（使用JSON对象的属性名）
        if (currentValue.TryGetValue(propertyName, out var value))
        {
            return value;
        }
        
        // 如果当前值中没有该属性，返回null（BasicTypeEditor会处理默认值）
        return null;
    }

    private async Task SetValue(string propertyName, object? value)
    {
        // 更新对象的指定属性值（使用JSON对象的属性名）
        if (value == null)
        {
            // 如果值为null，检查对应的SubStructure项是否允许null
            var structureItem = SubStructure?.Items?.FirstOrDefault(x => x.Name == propertyName);
            if (structureItem?.IsNullable == true)
            {
                currentValue[propertyName] = null!;
            }
            else
            {
                // 如果不允许null，移除该属性
                if (currentValue.ContainsKey(propertyName))
                {
                    currentValue.Remove(propertyName);
                }
            }
        }
        else
        {
            currentValue[propertyName] = value;
        }
        
        // 将更新后的Dictionary转换为JsonElement并通知父组件
        var result = JsonFileProviderConventions.ToJsonElement(currentValue);
        await ValueChanged.InvokeAsync(result);
    }

}