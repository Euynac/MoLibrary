@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MoLibrary.Configuration.Dashboard.UIConfiguration.Services
@using MoLibrary.Tool.MoResponse
@using MudBlazor
@using MoLibrary.UI.UIDiffHighlight.Components
@using Microsoft.JSInterop
@inject ConfigurationDashboardService ConfigurationDashboardService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <MudText Typo="Typo.h6">配置历史记录</MudText>
                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                    <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="RefreshHistory">刷新</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.DateRange" OnClick="ShowDateRangePicker">时间范围</MudButton>
                </MudButtonGroup>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    
    <MudCardContent>
        <!-- 筛选选项 -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="3">
                <MudTextField T="string" @bind-Value="_filterKey" 
                             Label="配置键" 
                             Variant="Variant.Outlined"
                             Clearable="true"
                             HelperText="可选，与应用ID同时使用查询特定配置" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudTextField T="string" @bind-Value="_filterAppId" 
                             Label="应用ID" 
                             Variant="Variant.Outlined"
                             Clearable="true"
                             HelperText="可选，与配置键同时使用查询特定配置" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudDateRangePicker @bind-DateRange="_dateRange" 
                                   Label="时间范围" 
                                   Variant="Variant.Outlined"
                                   HelperText="留空则查询近180天记录" />
            </MudItem>
            <MudItem xs="12" md="2">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          FullWidth="true"
                          OnClick="LoadHistoryData">
                    查询
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- 历史记录时间线 -->
        <MudTimeline TimelineOrientation="TimelineOrientation.Vertical">
            @foreach (var history in _historyRecords.Take(50)) // 限制显示条数
            {
                <MudTimelineItem Color="@GetTimelineColor("TODO计算当前历史操作")" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @history.ModificationTime.ToString("MM-dd HH:mm")
                        </MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudCard Outlined="true" Class="pa-3">
                            <MudCardHeader Class="pb-2">
                                <CardHeaderContent>
                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                        <div>
                                            <MudText Typo="Typo.body1" Style="font-weight: 500;">
                                                @history.Key
                                            </MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @history.Title
                                            </MudText>
                                        </div>
                                        <div style="display: flex; gap: 8px; align-items: center;">
                                            <MudChip T="string" Text="@GetOperationText("Update")" 
                                                    Size="Size.Small" 
                                                    Color="@GetOperationColor("Update")" />
                                            <MudText Typo="Typo.caption">@($"v{history.Version}")</MudText>
                                        </div>
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pt-0">
								@if (!string.IsNullOrEmpty(history.OldValue?.ToString()) || !string.IsNullOrEmpty(history.NewValue?.ToString()))
                                {
                                    <DiffViewer OriginText="@(history.OldValue?.ToString() ?? string.Empty)" 
                                               NewText="@(history.NewValue?.ToString() ?? string.Empty)" />
                                }
                                
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        操作者: @(history.Username ?? "System")
                                    </MudText>
                                    <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                                        <MudTooltip Text="回滚到此版本">
                                            <MudIconButton Icon="@Icons.Material.Filled.Restore" 
                                                          Color="Color.Warning"
                                                          OnClick="() => ShowRollbackDialog(history)" />
                                        </MudTooltip>
                                        <MudTooltip Text="复制新值">
                                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                                          Color="Color.Info"
                                                          OnClick="() => CopyToClipboard(history.NewValue?.ToString())" />
                                        </MudTooltip>
                                    </MudButtonGroup>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </ItemContent>
                </MudTimelineItem>
            }
        </MudTimeline>

        @if (_loading)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Indeterminate="true" />
            </div>
        }

        @if (!_historyRecords.Any() && !_loading)
        {
            <MudAlert Severity="Severity.Info">
                没有找到历史记录
            </MudAlert>
        }

        @if (_historyRecords.Count > 50)
        {
            <MudAlert Severity="Severity.Info" Class="mt-3">
                显示前50条记录，共 @_historyRecords.Count 条记录
            </MudAlert>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<DtoOptionHistory> _historyRecords = new();
    private bool _loading = false;
    
    // 筛选参数
    private string _filterKey = string.Empty;
    private string _filterAppId = string.Empty;
    private DateRange? _dateRange;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistoryData();
    }

    public async Task LoadHistoryForConfigAsync(string key, string appId)
    {
        _filterKey = key;
        _filterAppId = appId;
        await LoadHistoryData();
        StateHasChanged();
    }

    private async Task LoadHistoryData()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            // 根据API逻辑决定查询参数
            string? key = string.IsNullOrWhiteSpace(_filterKey) ? null : _filterKey;
            string? appId = string.IsNullOrWhiteSpace(_filterAppId) ? null : _filterAppId;
            DateTime? startDate = _dateRange?.Start;
            DateTime? endDate = _dateRange?.End;

            // 如果同时提供了key和appId，则查询特定配置
            // 如果只提供了时间范围，则按时间范围查询
            // 否则查询近180天的默认记录
            var result = await ConfigurationDashboardService.GetConfigHistoryAsync(
                key,
                appId,
                startDate,
                endDate
            );

            if (result.IsFailed(out var error, out var data))
            {
                Snackbar.Add($"加载历史记录失败: {error}", Severity.Error);
                return;
            }

            _historyRecords = data.OrderByDescending(h => h.ModificationTime).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载历史记录失败: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshHistory()
    {
        await LoadHistoryData();
        Snackbar.Add("历史记录已刷新", Severity.Success);
    }

    private async Task ShowDateRangePicker()
    {
        // 触发日期范围选择器的显示（MudDateRangePicker会自动处理）
        // 这里可以添加额外的逻辑，比如设置默认范围
        if (_dateRange == null)
        {
            _dateRange = new DateRange(DateTime.Now.AddDays(-30), DateTime.Now);
        }
        StateHasChanged();
    }

    private Color GetTimelineColor(string operation)
    {
        return operation switch
        {
            "Create" => Color.Success,
            "Update" => Color.Info,
            "Delete" => Color.Error,
            "Rollback" => Color.Warning,
            _ => Color.Default
        };
    }
    
    private string GetOperationText(string operation)
    {
        return operation switch
        {
            "Create" => "创建",
            "Update" => "更新",
            "Delete" => "删除",
            "Rollback" => "回滚",
            _ => operation
        };
    }

    private Color GetOperationColor(string operation)
    {
        return operation switch
        {
            "Create" => Color.Success,
            "Update" => Color.Info,
            "Delete" => Color.Error,
            "Rollback" => Color.Warning,
            _ => Color.Default
        };
    }


    private async Task ShowRollbackDialog(DtoOptionHistory history)
    {
        // 获取当前配置值
        string? currentValue = null;
        var currentConfigResult = await ConfigurationDashboardService.GetOptionItemStatusAsync(history.AppId, history.Key);
        if (currentConfigResult.IsFailed(out var error, out var data))
        {
            Snackbar.Add($"获取当前配置值失败: {error}", Severity.Warning);
        }
        else
        {
            currentValue = data.Value?.ToString();
        }

        var parameters = new DialogParameters<RollbackConfirmationDialog>
        {
            { x => x.History, history },
            { x => x.CurrentValue, currentValue }
        };

        var dialog = await DialogService.ShowAsync<RollbackConfirmationDialog>("确认回滚", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            FullWidth = true
        });
        var result = await dialog.Result;

        if (result is {Canceled: false} && (bool?)result.Data is true)
        {
            await RollbackConfiguration(history);
        }
    }

    private async Task RollbackConfiguration(DtoOptionHistory history)
    {
        try
        {
            if ((await ConfigurationDashboardService.RollbackConfigAsync(history.Key, history.AppId, history.Version)).IsFailed(out var error))
            {
                Snackbar.Add($"回滚失败: {error}", Severity.Error);
                return;
            }

            Snackbar.Add($"配置项 '{history.Key}' 已成功回滚到版本 {history.Version}", Severity.Success);
            await LoadHistoryData(); // 刷新历史记录
        }
        catch (Exception ex)
        {
            Snackbar.Add($"回滚失败: {ex.Message}", Severity.Error);
        }
    }

    private async Task CopyToClipboard(string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            Snackbar.Add("没有内容可复制", Severity.Warning);
            return;
        }

        try
        {
            // 使用现代的 Clipboard API
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", value);
            Snackbar.Add("值已复制到剪贴板", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("复制失败，请手动复制内容。可能是因为浏览器不支持或需要 HTTPS", Severity.Warning);
            Console.WriteLine($"Copy to clipboard failed: {ex.Message}");
        }
    }
}