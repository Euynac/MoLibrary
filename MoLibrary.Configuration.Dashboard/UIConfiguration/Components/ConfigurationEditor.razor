@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MoLibrary.Configuration.Providers
@using System.Text.Json
@using MudBlazor

<MudDialog Options="@_dialogOptions">
    <DialogContent>
        <MudContainer Style="max-width: 900px; padding: 0;">
            
            <!-- Simplified Configuration Info -->
            <MudGrid Class="mb-4">
                <!-- Provider Info -->
                <MudItem xs="12">
                    <MudPaper Class="pa-3" Elevation="1">
                        <MudText Typo="Typo.caption" Class="text-muted mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Source" Size="Size.Small" Class="me-1" />
                            配置提供者信息
                        </MudText>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <div Class="d-flex align-center mb-2">
                                    <MudText Typo="Typo.caption" Class="text-muted me-2" Style="min-width: 60px;">类型：</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Text">
                                        @(_configProvider ?? "Unknown")
                                    </MudChip>
                                </div>
                            </MudItem>
                            @if (!string.IsNullOrEmpty(_configSource))
                            {
                                <MudItem xs="12" md="6">
                                    <div Class="d-flex align-center mb-2">
                                        <MudText Typo="Typo.caption" Class="text-muted me-2" Style="min-width: 60px;">来源：</MudText>
                                        <MudText Typo="Typo.caption" Style="font-family: monospace; word-break: break-all;" Class="text-truncate">
                                            @_configSource
                                        </MudText>
                                    </div>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                
                <!-- Configuration Key -->
                @if (!string.IsNullOrEmpty(_configKey))
                {
                    <MudItem xs="12">
                        <MudPaper Class="pa-3" Elevation="1">
                            <MudText Typo="Typo.caption" Class="text-muted mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Key" Size="Size.Small" Class="me-1" />
                                配置键
                            </MudText>
                            <MudText Typo="Typo.body2" Style="font-family: monospace; word-break: break-all; background-color: rgba(0,0,0,0.04); padding: 8px; border-radius: 4px;">
                                @_configKey
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }
                
                <!-- Description -->
                @if (!string.IsNullOrEmpty(_configDescription))
                {
                    <MudItem xs="12">
                        <MudPaper Class="pa-3" Elevation="1">
                            <MudText Typo="Typo.caption" Class="text-muted mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="me-1" />
                                描述
                            </MudText>
                            <MudText Typo="Typo.body2">@_configDescription</MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
            
            <!-- Configuration Value Editor with Type Badge -->
            <MudPaper Class="pa-4 mb-4" Elevation="2" Style="position: relative;">
                <!-- Type and Status Badge in top-right corner -->
                <div Style="position: absolute; top: 12px; right: 12px;">
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Text" 
                            Icon="@Icons.Material.Filled.Category">
                        @_configType
                    </MudChip>
                    @if (_isOffline)
                    {
                        <MudTooltip Text="离线参数，修改后需要重启服务才能生效">
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Variant="Variant.Text" 
                                    Icon="@Icons.Material.Filled.CloudOff" Class="ml-2">
                                离线
                            </MudChip>
                        </MudTooltip>
                    }
                </div>
                
                <MudText Typo="Typo.h6" Class="mb-3 mr-16">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" />
                    编辑配置值
                </MudText>
                <ConfigurationValueEditor OptionItem="_currentConfig" 
                                         Value="_editValue" 
                                         ValueChanged="OnValueChanged" />
            </MudPaper>

            @if (!string.IsNullOrEmpty(_validationMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">
                    <MudText Typo="Typo.body2">@_validationMessage</MudText>
                </MudAlert>
            }
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Class="mr-2">取消</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled"
                  OnClick="ApplyChanges">
            应用修改
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
	[CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public EventCallback OnConfigurationUpdated { get; set; }
    [Parameter] public DtoOptionItem? ConfigItem { get; set; }
    [Parameter] public ConfigurationStateManager? StateManager { get; set; }
    [Parameter] public string ConfigName { get; set; } = string.Empty;

    private DtoOptionItem? _currentConfig;
    private string _configKey = string.Empty;
    private string _configTitle = string.Empty;
    private string _configType = string.Empty;
    private string _configDescription = string.Empty;
    private string _configProvider = string.Empty;
    private string _configSource = string.Empty;
    private string _validationMessage = string.Empty;
    private bool _isOffline = false;
    private object? _editValue;
    
    private readonly DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        CloseButton = true,
        BackdropClick = false
    };

    protected override void OnParametersSet()
    {
        if (ConfigItem != null)
        {
            ShowEditDialog(ConfigItem);
        }
    }

    public async Task ShowEditDialogAsync(DtoOptionItem config)
    {
        ShowEditDialog(config);
    }
    
    private void ShowEditDialog(DtoOptionItem config)
    {
        _currentConfig = config;
        _configKey = config.Key;
        _configTitle = config.Title;
        _configType = config.Type.ToString();
        _configDescription = config.Desc ?? string.Empty;
        _configProvider = config.Provider ?? "Unknown";
        _configSource = config.Source ?? string.Empty;
        _isOffline = config.IsOffline;
        // 将配置值转换为JsonElement
        _editValue = config.Value;
        
        _validationMessage = string.Empty;
        StateHasChanged();
    }
    
    private async Task OnValueChanged(object? newValue)
    {
        _editValue = newValue;
        await Task.CompletedTask;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task ApplyChanges()
    {
        _validationMessage = string.Empty;
        
        try
        {
            if (_currentConfig != null && StateManager != null && !string.IsNullOrEmpty(ConfigName))
            {
                // 直接使用 StateManager 更新配置项
                StateManager.UpdateItem(ConfigName, _currentConfig.Key, _editValue);
                
                // 通知父组件配置已更新
                await OnConfigurationUpdated.InvokeAsync();
            }

            // 关闭对话框
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            _validationMessage = $"应用修改失败: {ex.Message}";
            StateHasChanged();
        }
    }

}