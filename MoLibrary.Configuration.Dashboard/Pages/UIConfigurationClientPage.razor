@page "/configuration-client"
@using MoLibrary.Configuration.Dashboard.UIConfiguration.Services
@using MoLibrary.Configuration.Dashboard.UIConfiguration.Components
@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using MudBlazor
@using System.Text.Json
@using MoLibrary.Tool.MoResponse
@inject ConfigurationClientService ConfigurationClientService
@inject MoLibrary.Configuration.Services.ModuleConfigurationService ModuleConfigurationService
@inject ISnackbar Snackbar

<PageTitle>配置客户端</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">配置客户端</MudText>
    
    <MudTabs Elevation="4" Rounded="true" Color="Color.Primary" @bind-ActivePanelIndex="activeTabIndex" @bind-ActivePanelIndex:after="OnTabChangedAsync">
        <MudTabPanel Text="配置状态">
            <div class="pa-4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">配置状态</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudSwitch @bind-Value="onlyCurDomain" Label="仅当前域" Color="Color.Primary" />
                                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadConfigStatusAsync">刷新</MudButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                @if (configStatus != null)
                                {
                                    <ConfigurationExplorer Configs="configStatus" OnConfigUpdate="HandleConfigUpdate" />
                                }
                                else if (isLoading)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </div>
        </MudTabPanel>
        
        <MudTabPanel Text="调试视图">
            <div class="pa-4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Class="mr-2" Style="vertical-align: text-bottom;" />
                                配置调试视图
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadDebugViewAsync">刷新</MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (debugView != null && debugView.Any())
                        {
                            <MudTable T="string" Items="debugView" Dense="true" Hover="true" FixedHeader="true" Height="90vh" Style="width: 100%;">
                                <HeaderContent>
                                    <MudTh Style="width: 100%;">调试信息</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="调试信息" Style="width: 100%; word-break: break-all;">
                                        <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap; word-wrap: break-word;">@context</MudText>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                        else if (isLoadingDebug)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (debugView != null && !debugView.Any())
                        {
                            <MudAlert Severity="Severity.Info">暂无调试信息</MudAlert>
                        }
                        else
                        {
                            <MudText Class="text-muted">加载中...</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </div>
        </MudTabPanel>
        
        <MudTabPanel Text="配置提供者">
            <div class="pa-4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Extension" Class="mr-2" Style="vertical-align: text-bottom;" />
                                配置提供者
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ExpandMore" OnClick="ExpandAllProviders" Size="Size.Small">全部展开</MudButton>
                            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ExpandLess" OnClick="CollapseAllProviders" Size="Size.Small">全部折叠</MudButton>
                            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadProvidersAsync">刷新</MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (providerGroups != null && providerGroups.Any())
                        {
                            <MudExpansionPanels @ref="expansionPanels" Class="mb-4" MultiExpansion="true">
                                @for (int i = 0; i < providerGroups.Count; i++)
                                {
                                    var group = providerGroups[i];
                                    <MudExpansionPanel @bind-Expanded="expandedStates[i]">
                                        <TitleContent>
                                            <div style="display: flex; align-items: center">
                                                <MudIcon Icon="@Icons.Material.Filled.Extension" class="mr-3"></MudIcon>
                                                <MudText>@group.GroupName (@group.Providers.Count 个提供者)</MudText>
                                            </div>
                                        </TitleContent>
                                        <ChildContent>
                                            @foreach (var provider in group.Providers)
                                            {
                                                <MudCard Class="mb-3" Elevation="1">
                                                    <MudCardHeader>
                                                        <CardHeaderContent>
                                                            <MudText Typo="Typo.h6">@provider.Name</MudText>
                                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@provider.Type</MudChip>
                                                        </CardHeaderContent>
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        @if (provider.ConfigurationData.Any())
                                                        {
                                                            <MudTable T="KeyValuePair<string, string?>" Items="provider.ConfigurationData" Dense="true" Hover="true">
                                                                <HeaderContent>
                                                                    <MudTh>配置键</MudTh>
                                                                    <MudTh>配置值</MudTh>
                                                                </HeaderContent>
                                                                <RowTemplate>
                                                                    <MudTd DataLabel="配置键">
                                                                        <MudText Typo="Typo.body2" Style="font-family: monospace;">@context.Key</MudText>
                                                                    </MudTd>
                                                                    <MudTd DataLabel="配置值">
                                                                        <MudText Typo="Typo.body2" Style="font-family: monospace;">@(context.Value ?? "null")</MudText>
                                                                    </MudTd>
                                                                </RowTemplate>
                                                            </MudTable>
                                                        }
                                                        else
                                                        {
                                                            <MudText Class="text-muted">该提供者暂无配置数据</MudText>
                                                        }
                                                    </MudCardContent>
                                                </MudCard>
                                            }
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        }
                        else if (isLoadingProviders)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (providerGroups != null && !providerGroups.Any())
                        {
                            <MudAlert Severity="Severity.Info">暂无配置提供者数据，请检查配置模块是否正确初始化</MudAlert>
                        }
                        else
                        {
                            <MudText Class="text-muted">加载中...</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </div>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    public const string CONFIGURATION_CLIENT_URL = "/configuration-client";
    
    private List<DtoDomainConfigs>? configStatus;
    private string[]? debugView;
    private List<DtoConfigurationProviderGroup>? providerGroups;
    private bool onlyCurDomain = false;
    private bool isLoading = false;
    private bool isLoadingDebug = false;
    private bool isLoadingProviders = false;
    private int activeTabIndex = 0;
    private MudExpansionPanels? expansionPanels;
    private Dictionary<int, bool> expandedStates = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadConfigStatusAsync();
        }
    }

    private async Task OnTabChangedAsync()
    {
        // 当切换到其他标签页时自动加载数据
        switch (activeTabIndex)
        {
            case 1: // 调试视图
                if (debugView == null && !isLoadingDebug)
                {
                    await LoadDebugViewAsync();
                }
                break;
            case 2: // 配置提供者
                if (providerGroups == null && !isLoadingProviders)
                {
                    await LoadProvidersAsync();
                }
                break;
        }
    }

    private async Task LoadConfigStatusAsync()
    {
        isLoading = true;
        StateHasChanged();

        if ((await ModuleConfigurationService.GetConfigStatusAsync(onlyCurDomain)).IsFailed(out var error, out var data))
        {
            Snackbar.Add($"加载配置状态失败: {error}", Severity.Error);
        }
        else
        {
            configStatus = data;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadDebugViewAsync()
    {
        isLoadingDebug = true;
        StateHasChanged();

        if ((await ModuleConfigurationService.GetDebugViewAsync()).IsFailed(out var error, out var data))
        {
            Snackbar.Add($"加载调试视图失败: {error}", Severity.Error);
        }
        else
        {
            debugView = data;
        }

        isLoadingDebug = false;
        StateHasChanged();
    }

    private async Task LoadProvidersAsync()
    {
        isLoadingProviders = true;
        StateHasChanged();

        if ((await ModuleConfigurationService.GetProvidersAsync()).IsFailed(out var error, out var data))
        {
            Snackbar.Add($"加载配置提供者失败: {error}", Severity.Error);
        }
        else
        {
            providerGroups = data;
            // 初始化展开状态
            expandedStates.Clear();
            for (int i = 0; i < providerGroups.Count; i++)
            {
                expandedStates[i] = false;
            }
        }

        isLoadingProviders = false;
        StateHasChanged();
    }

    private async Task HandleConfigUpdate(DtoUpdateConfig updateRequest)
    {
        if ((await ConfigurationClientService.UpdateConfigAsync(updateRequest)).IsFailed(out var error))
        {
            Snackbar.Add($"配置更新失败: {error}", Severity.Error);
        }
        else
        {
            Snackbar.Add("配置更新成功", Severity.Success);
            await LoadConfigStatusAsync();
        }
    }

    private void ExpandAllProviders()
    {
        if (providerGroups != null)
        {
            for (int i = 0; i < providerGroups.Count; i++)
            {
                expandedStates[i] = true;
            }
            StateHasChanged();
        }
    }

    private void CollapseAllProviders()
    {
        if (providerGroups != null)
        {
            for (int i = 0; i < providerGroups.Count; i++)
            {
                expandedStates[i] = false;
            }
            StateHasChanged();
        }
    }
}