@page "/configuration-dashboard"
@using MoLibrary.Configuration.Dashboard.UIConfiguration.Components
@using MoLibrary.Configuration.Dashboard.UIConfiguration.Services
@using MoLibrary.Configuration.Dashboard.Modules
@using MoLibrary.Configuration.Model
@using MoLibrary.Configuration.Dashboard.Model
@using Microsoft.Extensions.Options
@using MudBlazor
@using MoLibrary.Tool.MoResponse
@using Microsoft.Extensions.DependencyInjection
@inject IOptionsSnapshot<ModuleConfigurationDashboardOption> DashboardOptions
@inject IServiceProvider ServiceProvider
@inject ISnackbar Snackbar

<PageTitle>配置面板</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">配置面板</MudText>
    
    @if (DashboardOptions.Value.ThisIsDashboard)
    {
        <MudTabs Elevation="4" Rounded="true" Color="Color.Primary" ActivePanelIndexChanged="OnTabChanged">
            <MudTabPanel Text="配置状态">
                <div class="pa-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">配置状态</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadConfigStatusAsync">刷新</MudButton>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (configStatus != null)
                                    {
                                        <ConfigurationExplorer Configs="configStatus" OnConfigUpdate="HandleConfigUpdate" />
                                    }
                                    else if (isLoading)
                                    {
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>
            
            <MudTabPanel Text="配置历史">
                <div class="pa-4">
                    <ConfigurationHistory />
                </div>
            </MudTabPanel>

			<MudTabPanel Text="配置概览">
                <div class="pa-4">
                    <ConfigurationOverview />
                </div>
            </MudTabPanel>
        </MudTabs>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="ma-4">
            <MudText Typo="Typo.h6">当前非面板服务</MudText>
            <MudText Typo="Typo.body1">当前服务未配置为配置面板服务，无法显示配置面板功能。</MudText>
            <MudText Typo="Typo.body2" Class="mt-2">
                如需启用配置面板功能，请在应用程序配置中设置 ThisIsDashboard 为 true。
            </MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    public const string CONFIGURATION_DASHBOARD_URL = "/configuration-dashboard";
    
    private List<DtoDomainConfigs>? configStatus;
    private bool isLoading = false;
    private ConfigurationDashboardService? configurationDashboardService;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (DashboardOptions.Value.ThisIsDashboard)
            {
				configurationDashboardService = ServiceProvider.GetService<ConfigurationDashboardService>();
                if (configurationDashboardService != null)
                {
                    await LoadConfigStatusAsync();
                }
            }
        }
    }

    private async Task LoadConfigStatusAsync()
    {
        if (configurationDashboardService == null) return;
        
        isLoading = true;
        StateHasChanged();

        if ((await configurationDashboardService.GetAllConfigStatusAsync()).IsFailed(out var error, out var data))
        {
            Snackbar.Add($"加载配置状态失败: {error}", Severity.Error);
        }
        else
        {
            configStatus = data;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleConfigUpdate(DtoUpdateConfig updateRequest)
    {
        if (configurationDashboardService == null) return;
        
        if ((await configurationDashboardService.UpdateConfigAsync(updateRequest)).IsFailed(out var error))
        {
            Snackbar.Add($"配置更新失败: {error}", Severity.Error);
        }
        else
        {
            Snackbar.Add("配置更新成功", Severity.Success);
            await LoadConfigStatusAsync();
        }
    }
    
    private void OnTabChanged(int activeTabIndex)
    {
        // Tab切换时不需要特殊处理，因为ConfigurationExplorer组件会保持状态
        // 这个方法预留给未来可能的扩展需求
    }
}