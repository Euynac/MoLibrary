using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace MoLibrary.Framework.Generators.AlterItemGenerator;

/// <summary>
/// 代码构建器，用于生成 AlterItemData 类和 Apply 方法的代码
/// </summary>
internal class CodeBuilder
{
    /// <summary>
    /// 生成 AlterItemData 类的完整代码
    /// </summary>
    public string BuildAlterItemDataClass(
        EntityAnalysisResult analysisResult, 
        FlattenedPropertyResult flattenedResult,
        string? customNamespace = null,
        string? customClassName = null,
        bool includeDebugInfo = false)
    {
        var entitySymbol = analysisResult.EntitySymbol;
        var entityName = entitySymbol.Name;
        var entityNamespace = entitySymbol.ContainingNamespace.ToDisplayString();
        var className = customClassName ?? $"{entityName}AlterItemDataGen";
        var namespaceName = customNamespace ?? $"{entityNamespace}";

        var sb = new StringBuilder();

        // 文件头部和 using 语句
        BuildFileHeader(sb, entitySymbol, includeDebugInfo);
        BuildUsingStatements(sb, entitySymbol, flattenedResult);

        // 命名空间开始
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();

        // 类定义开始
        BuildClassHeader(sb, className, entityName, includeDebugInfo);

        // 属性定义
        BuildProperties(sb, flattenedResult);

        // Apply 方法
        BuildApplyMethod(sb, entityName, flattenedResult);
        
        // GetChanges 方法
        BuildGetChangesMethod(sb, entityName, flattenedResult);

        // 类定义结束
        sb.AppendLine("}");

        return sb.ToString();
    }

    /// <summary>
    /// 构建文件头部
    /// </summary>
    private void BuildFileHeader(StringBuilder sb, INamedTypeSymbol entitySymbol, bool includeDebugInfo)
    {
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("// This code was generated by MoLibrary.Framework.Generators.AlterItemDataGenerator");
        
        if (includeDebugInfo)
        {
            sb.AppendLine($"// Generated at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"// Source entity: {entitySymbol.ToDisplayString()}");
        }
        
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
    }

    /// <summary>
    /// 构建 using 语句
    /// </summary>
    private void BuildUsingStatements(StringBuilder sb, INamedTypeSymbol entitySymbol, FlattenedPropertyResult flattenedResult)
    {
        var usings = new HashSet<string>
        {
            "System",
            "System.Collections.Generic",
            "System.ComponentModel.DataAnnotations",
            "System.Text.Json.Serialization",
            "MoLibrary.Framework.Features.AlterChain"
        };

        // 添加实体命名空间
        var entityNamespace = entitySymbol.ContainingNamespace.ToDisplayString();
        if (!string.IsNullOrEmpty(entityNamespace))
        {
            usings.Add(entityNamespace);
        }

        // 添加属性类型相关的命名空间
        foreach (var property in flattenedResult.Properties)
        {
            AddNamespacesFromProperty(usings, property);
        }

        foreach (var group in flattenedResult.NavigationGroups)
        {
            foreach (var property in group.Properties)
            {
                AddNamespacesFromProperty(usings, property);
            }
        }

        var sortedUsings = usings.OrderBy(u => u == "System" ? "0" : u).ToList();
        foreach (var usingStatement in sortedUsings)
        {
            sb.AppendLine($"using {usingStatement};");
        }

        sb.AppendLine();
    }

    /// <summary>
    /// 从FlattenedProperty中添加相关命名空间
    /// </summary>
    private void AddNamespacesFromProperty(HashSet<string> usings, FlattenedProperty property)
    {
        // 从原始属性符号的类型中提取命名空间
        var typeSymbol = property.OriginalPropertySymbol.Type;
        AddNamespacesFromTypeSymbol(usings, typeSymbol);
    }
    
    /// <summary>
    /// 从类型符号中添加命名空间
    /// </summary>
    private static void AddNamespacesFromTypeSymbol(HashSet<string> usings, ITypeSymbol typeSymbol)
    {
        // 处理可空类型
        if (typeSymbol is INamedTypeSymbol namedType && 
            namedType.IsGenericType && 
            namedType.OriginalDefinition.ToDisplayString() == "System.Nullable<T>")
        {
            AddNamespacesFromTypeSymbol(usings, namedType.TypeArguments[0]);
            return;
        }
        
        // 添加类型所在的命名空间
        var namespaceName = typeSymbol.ContainingNamespace?.ToDisplayString();
        if (!string.IsNullOrEmpty(namespaceName) && namespaceName != "<global namespace>")
        {
            usings.Add(namespaceName!);
        }
        
        // 处理泛型类型参数
        if (typeSymbol is INamedTypeSymbol genericType && genericType.IsGenericType)
        {
            foreach (var typeArg in genericType.TypeArguments)
            {
                AddNamespacesFromTypeSymbol(usings, typeArg);
            }
        }
    }

    /// <summary>
    /// 获取简洁的类型显示字符串，不使用global::前缀
    /// </summary>
    private string GetConciseTypeString(ITypeSymbol typeSymbol)
    {
        // 创建简洁的显示格式，不使用全限定名称
        var format = new SymbolDisplayFormat(
            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameOnly,
            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,
            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes
        );
        
        var typeName = typeSymbol.ToDisplayString(format);
        
        // 确保所有引用类型和值类型都是可空的
        if (!typeName.EndsWith("?"))
        {
            // 对于值类型，如果不是已经是 Nullable<T>，则添加 ?
            if (!typeSymbol.IsReferenceType)
            {
                if (typeSymbol is INamedTypeSymbol namedType && 
                    namedType.IsGenericType && 
                    namedType.OriginalDefinition.ToDisplayString() == "System.Nullable<T>")
                {
                    // 已经是 Nullable<T>，保持原样
                    return typeName;
                }

                return typeName + "?";
            }

            // 对于引用类型（包括string），添加 ?
            return typeName + "?";
        }
        
        return typeName;
    }

    /// <summary>
    /// 构建类头部
    /// </summary>
    private void BuildClassHeader(StringBuilder sb, string className, string entityName, bool includeDebugInfo)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// {entityName} 实体的变更数据类");
        sb.AppendLine("/// </summary>");
        
        if (includeDebugInfo)
        {
            sb.AppendLine("/// <remarks>");
            sb.AppendLine("/// 此类由 Source Generator 自动生成，请勿手动修改");
            sb.AppendLine("/// </remarks>");
        }
        
        sb.AppendLine($"public partial class {className} : IMoTracingDataAlterItemData<{entityName}>");
        sb.AppendLine("{");
    }

    /// <summary>
    /// 构建属性定义
    /// </summary>
    private void BuildProperties(StringBuilder sb, FlattenedPropertyResult flattenedResult)
    {
        // 分组属性：直接属性和导航属性分别处理
        var directProperties = flattenedResult.Properties.Where(p => !p.IsOptionalNavigation).ToList();
        var propertyGroups = GroupPropertiesByOwner(directProperties);
        
        // 生成直接属性（无分组）
        foreach (var property in propertyGroups.Where(g => g.Key == "Direct").SelectMany(g => g.Value))
        {
            BuildPropertyDeclaration(sb, property);
        }
        
        // 生成分组属性
        foreach (var group in propertyGroups.Where(g => g.Key != "Direct"))
        {
            sb.AppendLine($"    #region {group.Key}");
            sb.AppendLine();
            
            foreach (var property in group.Value)
            {
                BuildPropertyDeclaration(sb, property);
            }
            
            sb.AppendLine("    #endregion");
            sb.AppendLine();
        }
        
        // 生成导航属性组
        foreach (var navGroup in flattenedResult.NavigationGroups)
        {
            sb.AppendLine($"    #region {navGroup.NavigationPropertyName}");
            sb.AppendLine();
            
            foreach (var property in navGroup.Properties)
            {
                BuildPropertyDeclaration(sb, property);
            }
            
            sb.AppendLine("    #endregion");
            sb.AppendLine();
        }
    }

    /// <summary>
    /// 构建 Apply 方法和 GenedApply 方法
    /// </summary>
    private void BuildApplyMethod(StringBuilder sb, string entityName, FlattenedPropertyResult flattenedResult)
    {
        // 生成 virtual Apply 方法
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 应用变更到目标实体 (可被重写以扩展功能)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    /// <param name=\"entity\">目标 {entityName} 实体</param>");
        sb.AppendLine($"    public virtual void Apply({entityName} entity)");
        sb.AppendLine("    {");
        sb.AppendLine("        GenedApply(entity);");
        sb.AppendLine("    }");
        sb.AppendLine();

        // 生成 GenedApply 方法
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 生成的应用变更逻辑 (由Source Generator自动生成)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    /// <param name=\"entity\">目标 {entityName} 实体</param>");
        sb.AppendLine($"    protected void GenedApply({entityName} entity)");
        sb.AppendLine("    {");

        // 处理直接属性（从 Owned 类型扁平化的属性）
        var directProperties = flattenedResult.Properties.Where(p => !p.IsOptionalNavigation).ToList();
        var propertyGroups = GroupPropertiesByOwner(directProperties);
        
        // 生成直接属性赋值（无分组）
        foreach (var property in propertyGroups.Where(g => g.Key == "Direct").SelectMany(g => g.Value))
        {
            BuildPropertyAssignment(sb, property);
        }
        
        // 生成分组属性赋值
        foreach (var group in propertyGroups.Where(g => g.Key != "Direct"))
        {
            sb.AppendLine($"        #region {group.Key}");
            sb.AppendLine();
            
            foreach (var property in group.Value)
            {
                BuildPropertyAssignment(sb, property);
            }
            
            sb.AppendLine("        #endregion");
            sb.AppendLine();
        }
        
        // 处理导航属性组
        foreach (var group in flattenedResult.NavigationGroups)
        {
            BuildNavigationPropertyGroup(sb, group);
        }

        sb.AppendLine("    }");
    }

    /// <summary>
    /// 构建属性赋值代码
    /// </summary>
    private void BuildPropertyAssignment(StringBuilder sb, FlattenedProperty property)
    {
        sb.AppendLine($"        if ({property.Name} != null)");
        sb.AppendLine("        {");

        // 处理特殊情况：DateTime 默认值检查
        if (IsDateTimeType(property.Type))
        {
            // 检查原始属性是否可空
            if (property.OriginalType.Contains("?") || property.OriginalType.StartsWith("DateTime?"))
            {

                // 目标属性是可空的，需要检查默认值并转换
                sb.AppendLine($"            if ({property.Name} != default(DateTime))");
                sb.AppendLine("            {");
                var safePropertyPath = property.PropertyPath.Contains('.') ? MakeNonNullPropertyPath(property.PropertyPath) : property.PropertyPath;
                sb.AppendLine($"                entity.{safePropertyPath} = {property.Name}.Value;");
                sb.AppendLine("            }");
                sb.AppendLine("            else");
                sb.AppendLine("            {");
                sb.AppendLine($"                entity.{safePropertyPath} = null;");
                sb.AppendLine("            }");
                
            }
            else
            {
                // 目标属性是非空的，直接赋值
                var safePropertyPath = property.PropertyPath.Contains('.') ? MakeNonNullPropertyPath(property.PropertyPath) : property.PropertyPath;
                sb.AppendLine($"            entity.{safePropertyPath} = {property.Name}.Value;");
            }
        }
        else if (IsNullableValueType(property.Type))
        {
            var safePropertyPath = property.PropertyPath.Contains('.') ? MakeNonNullPropertyPath(property.PropertyPath) : property.PropertyPath;
            sb.AppendLine($"            entity.{safePropertyPath} = {property.Name}.Value;");
        }
        else
        {
            var safePropertyPath = property.PropertyPath.Contains('.') ? MakeNonNullPropertyPath(property.PropertyPath) : property.PropertyPath;
            sb.AppendLine($"            entity.{safePropertyPath} = {property.Name};");
        }

        sb.AppendLine("        }");
        sb.AppendLine();
    }

    /// <summary>
    /// 构建导航属性组代码
    /// </summary>
    private void BuildNavigationPropertyGroup(StringBuilder sb, NavigationPropertyGroup group)
    {
        sb.AppendLine($"        #region {group.NavigationPropertyName}");
        sb.AppendLine();
        
        // 生成检查数组和条件
        var propertyNames = group.Properties.Select(p => p.Name).ToList();
        sb.AppendLine($"        object?[] {group.NavigationPropertyName.ToLower()}List = [{string.Join(", ", propertyNames)}];");
        sb.AppendLine($"        if ({group.NavigationPropertyName.ToLower()}List.Any(x => x != null))");
        sb.AppendLine("        {");
        sb.AppendLine($"            entity.{group.NavigationPropertyName} ??= new {GetNavigationPropertyType(group)}();");
        sb.AppendLine("        }");
        sb.AppendLine();

        // 生成单个属性赋值
        foreach (var property in group.Properties)
        {
            sb.AppendLine($"        if ({property.Name} != null)");
            sb.AppendLine("        {");
            
            if (IsDateTimeType(property.Type))
            {
                // 检查原始属性是否可空
                if (property.OriginalType.Contains("?") || property.OriginalType.StartsWith("DateTime?"))
                {
                    // 目标属性是可空的，直接赋值
                    var safePropertyPath = MakeNonNullPropertyPath(property.PropertyPath);
                    sb.AppendLine($"            entity.{safePropertyPath} = {property.Name};");
                }
                else
                {
                    // 目标属性是非空的，需要检查默认值并转换
                    sb.AppendLine($"            if ({property.Name} != default(DateTime))");
                    sb.AppendLine("            {");
                    var safePropertyPath = MakeNonNullPropertyPath(property.PropertyPath);
                    sb.AppendLine($"                entity.{safePropertyPath} = {property.Name}.Value;");
                    sb.AppendLine("            }");
                }
            }
            else if (IsNullableValueType(property.Type))
            {
                var safePropertyPath = MakeNonNullPropertyPath(property.PropertyPath);
                sb.AppendLine($"            entity.{safePropertyPath} = {property.Name}.Value;");
            }
            else
            {
                var safePropertyPath = MakeNonNullPropertyPath(property.PropertyPath);
                sb.AppendLine($"            entity.{safePropertyPath} = {property.Name};");
            }
            
            sb.AppendLine("        }");
            sb.AppendLine();
        }

        sb.AppendLine("        #endregion");
        sb.AppendLine();
    }

    /// <summary>
    /// 获取导航属性类型
    /// </summary>
    private string GetNavigationPropertyType(NavigationPropertyGroup group)
    {
        // 使用从符号信息中获取的实际类型名称
        return group.NavigationPropertyTypeName;
    }

    /// <summary>
    /// 检查是否是 DateTime 类型
    /// </summary>
    private bool IsDateTimeType(string type)
    {
        return type.Contains("DateTime") && !type.Contains("Offset");
    }

    /// <summary>
    /// 检查是否是可空值类型
    /// </summary>
    private bool IsNullableValueType(string type)
    {
        return type.EndsWith("?") && 
               !type.StartsWith("string") && 
               !type.Contains("List<") &&
               !type.Contains("IList<");
    }
    
    /// <summary>
    /// 根据属性路径对属性进行分组
    /// </summary>
    private Dictionary<string, List<FlattenedProperty>> GroupPropertiesByOwner(List<FlattenedProperty> properties)
    {
        var groups = new Dictionary<string, List<FlattenedProperty>>();
        
        foreach (var property in properties)
        {
            var groupName = GetOwnerGroupName(property.PropertyPath);
            
            if (!groups.ContainsKey(groupName))
            {
                groups[groupName] = new List<FlattenedProperty>();
            }
            
            groups[groupName].Add(property);
        }
        
        return groups;
    }
    
    /// <summary>
    /// 获取属性所属的分组名称
    /// </summary>
    private string GetOwnerGroupName(string propertyPath)
    {
        if (!propertyPath.Contains('.')) 
            return "Direct";
            
        var parts = propertyPath.Split('.');
        return parts[0]; // 返回第一部分作为分组名
    }
    
    /// <summary>
    /// 构建属性声明
    /// </summary>
    private void BuildPropertyDeclaration(StringBuilder sb, FlattenedProperty property)
    {
        // XML 文档注释
        if (!string.IsNullOrWhiteSpace(property.XmlDocumentation))
        {
            sb.AppendLine("    /// <summary>");
            // 处理多行注释，确保每行都有 ///
            var lines = property.XmlDocumentation!.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                sb.AppendLine($"    /// {line.Trim()}");
            }
            sb.AppendLine("    /// </summary>");
        }

        // 使用简洁的类型名称
        var conciseType = GetConciseTypeString(property.OriginalPropertySymbol.Type);
        
        // 确保类型是可空的
        if (!conciseType.EndsWith("?") && !IsReferenceType(property.OriginalPropertySymbol.Type))
        {
            conciseType += "?";
        }
        
        // 属性定义
        sb.AppendLine($"    public {conciseType} {property.Name} {{ get; set; }}");
        sb.AppendLine();
    }
    
    /// <summary>
    /// 检查是否是引用类型
    /// </summary>
    private bool IsReferenceType(ITypeSymbol type)
    {
        return type.IsReferenceType || (type is INamedTypeSymbol namedType && 
                                       namedType.IsGenericType && 
                                       namedType.OriginalDefinition.ToDisplayString().StartsWith("System.Collections.Generic.List<"));
    }

    /// <summary>
    /// 构建 GetChanges 方法和 GenedGetChanges 方法
    /// </summary>
    private void BuildGetChangesMethod(StringBuilder sb, string entityName, FlattenedPropertyResult flattenedResult)
    {
        // 生成 virtual GetChanges 方法
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 获取当前变更信息 (可被重写以扩展功能)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    /// <param name=\"entity\">如果传入此值将会返回变更相关的实体值</param>");
        sb.AppendLine("    /// <returns>属性变更信息列表</returns>");
        sb.AppendLine($"    public virtual IEnumerable<PropertyAlterData> GetChanges({entityName}? entity = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        return GenedGetChanges(entity);");
        sb.AppendLine("    }");
        sb.AppendLine();

        // 生成 GenedGetChanges 方法
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 生成的获取变更信息逻辑 (由Source Generator自动生成)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    /// <param name=\"entity\">如果传入此值将会返回变更相关的实体值</param>");
        sb.AppendLine("    /// <returns>属性变更信息列表</returns>");
        sb.AppendLine($"    protected IEnumerable<PropertyAlterData> GenedGetChanges({entityName}? entity = null)");
        sb.AppendLine("    {");

        // 处理直接属性（从 Owned 类型扁平化的属性）
        var directProperties = flattenedResult.Properties.Where(p => !p.IsOptionalNavigation).ToList();
        foreach (var property in directProperties)
        {
            BuildGetChangesPropertyYield(sb, property);
        }

        // 处理导航属性组
        foreach (var navGroup in flattenedResult.NavigationGroups)
        {
            foreach (var property in navGroup.Properties)
            {
                BuildGetChangesPropertyYield(sb, property);
            }
        }

        sb.AppendLine("    }");
    }

    /// <summary>
    /// 构建 GetChanges 方法中的属性 yield return 代码
    /// </summary>
    private void BuildGetChangesPropertyYield(StringBuilder sb, FlattenedProperty property)
    {
        sb.AppendLine($"        if ({property.Name} != null)");
        sb.AppendLine("        {");
        sb.AppendLine("            yield return new PropertyAlterData");
        sb.AppendLine("            {");
        
        // 优先使用 AlterItemPropertyAttribute 的Title，否则使用 PropertyName
        var displayName = GetPropertyDisplayName(property);
        sb.AppendLine($"                DisplayName = \"{displayName}\",");
        sb.AppendLine($"                PropertyName = nameof({property.Name}),");
        sb.AppendLine($"                NewValue = {property.Name},");
        
        // 处理可空导航属性的安全访问
        var safePropertyPath = MakeSafePropertyPath(property.PropertyPath);
        sb.AppendLine($"                OldValue = entity?.{safePropertyPath}");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

    /// <summary>
    /// 将属性路径转换为安全的可空访问路径
    /// </summary>
    private string MakeSafePropertyPath(string propertyPath)
    {
        // 将 "DepInfo.COBT" 转换为 "DepInfo?.COBT"
        var parts = propertyPath.Split('.');
        if (parts.Length > 1)
        {
            return string.Join("?.", parts);
        }
        return propertyPath;
    }

    /// <summary>
    /// 将属性路径转换为非空访问路径（用于赋值语句）
    /// </summary>
    private string MakeNonNullPropertyPath(string propertyPath)
    {
        // 将 "DepInfo.COBT" 转换为 "DepInfo!.COBT"
        var parts = propertyPath.Split('.');
        if (parts.Length > 1)
        {
            // 第一个部分是导航属性，需要加上 !
            return parts[0] + "!." + string.Join(".", parts.Skip(1));
        }
        return propertyPath;
    }

    /// <summary>
    /// 获取属性显示名称，优先使用 AlterItemPropertyAttribute 的Title，否则使用 PropertyName
    /// </summary>
    private string GetPropertyDisplayName(FlattenedProperty property)
    {
        // 检查 AlterItemPropertyAttribute 的 Title 设置
        var alterItemAttr = property.OriginalPropertySymbol.GetAttributes()
            .FirstOrDefault(attr => attr.AttributeClass?.Name == "AlterItemPropertyAttribute");
        
        if (alterItemAttr != null)
        {
            // 查找 Title 属性
            var titleNamedArg = alterItemAttr.NamedArguments
                .FirstOrDefault(arg => arg.Key == "Title");
            
            if (!titleNamedArg.Equals(default(KeyValuePair<string, TypedConstant>)) && 
                titleNamedArg.Value.Value is string titleValue && 
                !string.IsNullOrEmpty(titleValue))
            {
                return titleValue;
            }
        }
        
        // 默认返回属性名
        return property.Name;
    }
}