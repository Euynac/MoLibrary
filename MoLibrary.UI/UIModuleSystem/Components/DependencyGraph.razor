@using MoLibrary.Core.Module.Dashboard.Models
@using MoLibrary.Core.Module.Models
@using MudBlazor
@using Microsoft.JSInterop

<div class="dependency-graph-container">
    @if (DependencyGraphData != null)
    {
        <MudGrid Spacing="4" Class="mb-4">
            <!-- 依赖关系概览 -->
            <MudItem xs="12" md="4">
                <MudCard Class="modern-card">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.AccountTree" Color="Color.Primary" Class="mr-2" />
                                <MudText Typo="Typo.h6">依赖关系概览</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-4">
                        <MudStack Spacing="3">
                            <MudPaper Class="pa-4 overview-stat-card" Elevation="2">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">总节点数</MudText>
                                        <MudText Typo="Typo.h5" Color="Color.Primary">@DependencyGraphData.Nodes.Count.ToString()</MudText>
                                    </div>
                                    <MudIcon Icon="@Icons.Material.Filled.Hub" Color="Color.Primary" Size="Size.Large" />
                                </div>
                            </MudPaper>
                            <MudPaper Class="pa-4 overview-stat-card" Elevation="2">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Info">总依赖关系</MudText>
                                        <MudText Typo="Typo.h5" Color="Color.Info">@DependencyGraphData.Edges.Count.ToString()</MudText>
                                    </div>
                                    <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Info" Size="Size.Large" />
                                </div>
                            </MudPaper>
                            <MudPaper Class="pa-4 overview-stat-card" Elevation="2">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Color="@(DependencyGraphData.HasCircularDependencies ? Color.Warning : Color.Success)">循环依赖</MudText>
                                        <MudText Typo="Typo.h5" Color="@(DependencyGraphData.HasCircularDependencies ? Color.Warning : Color.Success)">@(DependencyGraphData.HasCircularDependencies ? "存在" : "无")</MudText>
                                    </div>
                                    @if (DependencyGraphData.HasCircularDependencies)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Large" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                                    }
                                </div>
                            </MudPaper>
                            <MudPaper Class="pa-4 overview-stat-card" Elevation="2">
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">依赖层级</MudText>
                                        <MudText Typo="Typo.h5" Color="Color.Secondary">@DependencyGraphData.ModuleLayers.Count.ToString()</MudText>
                                    </div>
                                    <MudIcon Icon="@Icons.Material.Filled.Layers" Color="Color.Secondary" Size="Size.Large" />
                                </div>
                            </MudPaper>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- 图表控制 -->
            <MudItem xs="12" md="8">
                <MudCard Class="modern-card">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Class="mr-2" />
                                <MudText Typo="Typo.h6">图表控制</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-4">
                        <MudGrid Spacing="4">
                            <MudItem xs="12" md="6">
                                <MudSelect T="string" Value="selectedLayout" Label="布局算法" 
                                         ValueChanged="OnLayoutChanged" Variant="Variant.Outlined"
                                         AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@("force")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.ScatterPlot" Class="mr-2" />
                                            力导向布局
                                        </div>
                                    </MudSelectItem>
                                    <MudSelectItem Value="@("hierarchical")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.AccountTree" Class="mr-2" />
                                            层次布局
                                        </div>
                                    </MudSelectItem>
                                    <MudSelectItem Value="@("circular")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Circle" Class="mr-2" />
                                            环形布局
                                        </div>
                                    </MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudSelect T="string" Value="selectedFilter" Label="过滤器" 
                                         ValueChanged="OnFilterChanged" Variant="Variant.Outlined"
                                         AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@("all")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
                                            显示全部
                                        </div>
                                    </MudSelectItem>
                                    <MudSelectItem Value="@("direct")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.DirectionsRun" Class="mr-2" />
                                            仅直接依赖
                                        </div>
                                    </MudSelectItem>
                                    <MudSelectItem Value="@("cycle")">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
                                            仅循环依赖
                                        </div>
                                    </MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                        <MudDivider Class="my-4" />
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" 
                                     Size="Size.Small"
                                     StartIcon="@Icons.Material.Filled.ZoomIn" 
                                     OnClick="ZoomIn">
                                放大
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" 
                                     Size="Size.Small"
                                     StartIcon="@Icons.Material.Filled.ZoomOut" 
                                     OnClick="ZoomOut">
                                缩小
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" 
                                     Size="Size.Small"
                                     StartIcon="@Icons.Material.Filled.CenterFocusStrong" 
                                     OnClick="ResetZoom">
                                重置视图
                            </MudButton>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- 依赖关系图 -->
            <MudItem xs="12">
                <MudCard Class="modern-card">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.DeviceHub" Color="Color.Primary" Class="mr-2" />
                                <MudText Typo="Typo.h6">依赖关系图</MudText>
                            </div>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     Size="Size.Small"
                                     StartIcon="@Icons.Material.Filled.Download"
                                     OnClick="ExportGraph">
                                导出图片
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0">
                        <MudPaper id="dependency-graph-container" 
                                Class="dependency-graph-canvas"
                                Style="height: 600px; width: 100%;" 
                                Elevation="2">
                            <!-- 图表将在这里渲染 -->
                        </MudPaper>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- 图例 -->
            <MudItem xs="12" md="6">
                <MudCard Class="modern-card">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Info" Class="mr-2" />
                                <MudText Typo="Typo.h6">图例</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-4">
                        <MudStack Spacing="4">
                            <div>
                                <MudText Typo="Typo.subtitle1" Class="mb-3">节点类型</MudText>
                                <MudStack Spacing="2">
                                    <div class="d-flex align-center">
                                        <div class="legend-circle" style="background-color: #64B5F6; width: 24px; height: 24px; border-radius: 50%; margin-right: 12px;"></div>
                                        <MudText Typo="Typo.body2">启用模块</MudText>
                                    </div>
                                    <div class="d-flex align-center">
                                        <div class="legend-circle" style="background-color: #FFB74D; width: 24px; height: 24px; border-radius: 50%; margin-right: 12px;"></div>
                                        <MudText Typo="Typo.body2">禁用模块</MudText>
                                    </div>
                                    <div class="d-flex align-center">
                                        <div class="legend-circle" style="background-color: #E57373; width: 24px; height: 24px; border-radius: 50%; margin-right: 12px;"></div>
                                        <MudText Typo="Typo.body2">循环依赖模块</MudText>
                                    </div>
                                </MudStack>
                            </div>
                            <MudDivider />
                            <div>
                                <MudText Typo="Typo.subtitle1" Class="mb-3">连线类型</MudText>
                                <MudStack Spacing="2">
                                    <div class="d-flex align-center">
                                        <div class="legend-line" style="background-color: #81C784; width: 30px; height: 3px; margin-right: 12px;"></div>
                                        <MudText Typo="Typo.body2">直接依赖</MudText>
                                    </div>
                                    <div class="d-flex align-center">
                                        <div class="legend-line" style="background-color: #BA68C8; width: 30px; height: 3px; margin-right: 12px; border-top: 2px dashed #BA68C8; background: none;"></div>
                                        <MudText Typo="Typo.body2">传递依赖</MudText>
                                    </div>
                                    <div class="d-flex align-center">
                                        <div class="legend-line" style="background-color: #FF8A65; width: 30px; height: 3px; margin-right: 12px;"></div>
                                        <MudText Typo="Typo.body2">循环依赖</MudText>
                                    </div>
                                </MudStack>
                            </div>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- 节点详情 -->
            <MudItem xs="12" md="6">
                <MudCard Class="modern-card">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Secondary" Class="mr-2" />
                                <MudText Typo="Typo.h6">节点详情</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-4">
                        <div class="node-detail-content" style="min-height: 200px;">
                            <div class="d-flex align-center justify-center" style="height: 100%; color: var(--mud-palette-text-secondary);">
                                <div class="text-center">
                                    <MudIcon Icon="@Icons.Material.Filled.TouchApp" Size="Size.Large" Color="Color.Secondary" Class="mb-3" />
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                                        鼠标悬停在节点上查看详情
                                    </MudText>
                                </div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid Spacing="4" Class="mb-4">
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" md="@(i == 2 ? 12 : 6)">
                    <MudCard Class="modern-card">
                        <MudCardContent Class="pa-4 d-flex align-center justify-center" Style="@(i == 2 ? "min-height: 600px;" : "min-height: 300px;")">
                            <div class="text-center">
                                <MudProgressCircular Indeterminate="true" Class="mb-3" />
                                <MudText Color="Color.Secondary">@GetLoadingText(i)</MudText>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</div>

@code {
    private IJSObjectReference? jsModule;
    private string selectedLayout = "force";
    private string selectedFilter = "all";
    private string selectedNodeInfo = "";

    /// <summary>
    /// 依赖关系图数据
    /// </summary>
    [Parameter] public ModuleDependencyGraph? DependencyGraphData { get; set; }

    /// <summary>
    /// JavaScript运行时
    /// </summary>
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;

    /// <summary>
    /// 组件初始化后
    /// </summary>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DependencyGraphData != null)
        {
			jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/_content/MoLibrary.UI/js/module-dependency-graph.js");
            await InitializeGraph();
        }
    }

    /// <summary>
    /// 初始化图表
    /// </summary>
    /// <returns></returns>
    private async Task InitializeGraph()
    {
        if (jsModule == null || DependencyGraphData == null) return;

        var nodes = DependencyGraphData.Nodes.Select(n => new
        {
            id = n.Module.ToString(),
            label = n.Module.ToString(),
            isPartOfCycle = n.IsPartOfCycle,
            isDisabled = false // 这里需要根据实际情况设置
        }).ToArray();

        var edges = DependencyGraphData.Edges.Select(e => new
        {
            source = e.SourceModule.ToString(),
            target = e.TargetModule.ToString(),
            dependencyType = e.DependencyType.ToString(),
            isPartOfCycle = e.IsPartOfCycle
        }).ToArray();

        await jsModule.InvokeVoidAsync("initializeDependencyGraph", "dependency-graph-container", nodes, edges);
    }

    /// <summary>
    /// 布局改变事件
    /// </summary>
    /// <param name="layout">布局类型</param>
    /// <returns></returns>
    private async Task OnLayoutChanged(string layout)
    {
        selectedLayout = layout;
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("changeLayout", layout);
        }
    }

    /// <summary>
    /// 过滤器改变事件
    /// </summary>
    /// <param name="filter">过滤器类型</param>
    /// <returns></returns>
    private async Task OnFilterChanged(string filter)
    {
        selectedFilter = filter;
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("applyFilter", filter);
        }
    }

    /// <summary>
    /// 放大图表
    /// </summary>
    /// <returns></returns>
    private async Task ZoomIn()
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("zoomIn");
        }
    }

    /// <summary>
    /// 缩小图表
    /// </summary>
    /// <returns></returns>
    private async Task ZoomOut()
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("zoomOut");
        }
    }

    /// <summary>
    /// 重置视图
    /// </summary>
    /// <returns></returns>
    private async Task ResetZoom()
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("resetZoom");
        }
    }

    /// <summary>
    /// 导出图片
    /// </summary>
    /// <returns></returns>
    private async Task ExportGraph()
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("exportGraph", "dependency-graph.png");
        }
    }

    /// <summary>
    /// 获取依赖类型颜色
    /// </summary>
    /// <param name="type">依赖类型</param>
    /// <returns>颜色</returns>
    private Color GetDependencyTypeColor(DependencyType type) => type switch
    {
        DependencyType.Direct => Color.Primary,
        DependencyType.Transitive => Color.Info,
        DependencyType.Circular => Color.Warning,
        _ => Color.Default
    };

    /// <summary>
    /// 获取加载文本
    /// </summary>
    /// <param name="index">索引</param>
    /// <returns>加载文本</returns>
    private string GetLoadingText(int index) => index switch
    {
        0 => "加载依赖关系概览...",
        1 => "加载图表控制...",
        2 => "加载依赖关系图...",
        3 => "加载图例...",
        4 => "加载节点详情...",
        _ => "加载中..."
    };

    /// <summary>
    /// 资源释放
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
    }
}

@implements IAsyncDisposable 