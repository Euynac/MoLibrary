@using Microsoft.Extensions.Options
@using MoLibrary.UI.Modules
@using MoLibrary.UI.UICore.Interfaces
@using MoLibrary.UI.Services
@inject IUIComponentRegistry UIRegistry
@inject IOptions<ModuleUICoreOption> Options
@inject MoThemeService ThemeService

<div class="mo-sidebar @GetSidebarClass()" @onmouseenter="HandleMouseEnter" @onmouseleave="HandleMouseLeave">
    <!-- Logo 和标题区域 -->
    <div class="mo-sidebar-header">
        <div class="mo-logo-container">
            <MudIconButton Icon="@Icons.Material.Filled.Dashboard" 
                          Color="Color.Primary" 
                          Size="Size.Large"
                          Class="mo-logo-icon" />
            @if (_actualExpanded)
            {
                <MudText Typo="Typo.h6" Class="mo-app-title">
                    @Options.Value.UIAppBarName
                </MudText>
            }
        </div>
    </div>
    
    <!-- 导航菜单 -->
    <div class="mo-navigation">
        <MudNavMenu Class="mo-nav-menu">
            @foreach (var navItem in UIRegistry.GetNavItems())
            {
                <div class="mo-nav-item">
                    <MudNavLink Href="@navItem.Href" 
                               Icon="@navItem.Icon" 
                               Disabled="@navItem.Disabled">
                        @if (_actualExpanded)
                        {
                            @navItem.Text
                        }
                    </MudNavLink>
                </div>
            }
        </MudNavMenu>
    </div>
    
    <!-- 底部工具区域 -->
    <div class="mo-sidebar-footer">
        @if (_actualExpanded)
        {
            <div class="mo-theme-section-expanded">
                <MoThemeSelector />
                <MudText Typo="Typo.body2" Class="mo-section-title">主题设置</MudText>
            </div>
        }
        else
        {
            <div class="mo-theme-compact">
                <MoThemeSelector />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool IsExpanded { get; set; } = false;
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
    
    private bool _isHovering = false;
    private bool _actualExpanded = false;

    protected override void OnParametersSet()
    {
        _actualExpanded = IsExpanded || _isHovering;
    }

    private async Task HandleMouseEnter()
    {
        _isHovering = true;
        _actualExpanded = true;
        await IsExpandedChanged.InvokeAsync(true);
    }

    private async Task HandleMouseLeave()
    {
        _isHovering = false;
        _actualExpanded = false;
        await IsExpandedChanged.InvokeAsync(false);
    }

    private string GetSidebarClass()
    {
        return _actualExpanded ? "expanded" : "collapsed";
    }
}