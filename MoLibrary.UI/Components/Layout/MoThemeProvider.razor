@using MoLibrary.UI.Services
@inject MoThemeService ThemeService
@inject IJSRuntime JSRuntime
@implements IDisposable

<MudThemeProvider Theme="@ThemeService.CurrentTheme" IsDarkMode="@ThemeService.IsDarkMode" />

<div class="@ThemeService.GetThemeCssClass()" data-theme="@ThemeService.GetThemeDataAttribute()">
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/theme-helper.js").ConfigureAwait(false);
                var themeData = await module.InvokeAsync<string>("getThemeData").ConfigureAwait(false);
                
                // Use InvokeAsync to ensure we're on the UI thread when setting the theme
                await InvokeAsync(() =>
                {
                    if (!string.IsNullOrEmpty(themeData))
                    {
                        var parts = themeData.Split('|');
                        if (parts.Length == 2)
                        {
                            ThemeService.CurrentThemeName = parts[0];
                            ThemeService.IsDarkMode = parts[1] == "dark";
                        }
                        else
                        {
                            // 旧版本兼容
                            ThemeService.IsDarkMode = themeData == "dark";
                        }
                    }
                });
            }
            catch (Exception)
            {
                // 如果JavaScript模块加载失败，使用默认主题
                await InvokeAsync(() =>
                {
                    ThemeService.IsDarkMode = false;
                });
            }
        }
    }

    private async void OnThemeChanged()
    {
        try
        {
            // 保存主题偏好到localStorage
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/theme-helper.js").ConfigureAwait(false);
            await module.InvokeVoidAsync("saveThemeData", ThemeService.CurrentThemeName, ThemeService.IsDarkMode ? "dark" : "light");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            // 如果JavaScript模块加载失败，回退到直接调用localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "mo-theme-data", $"{ThemeService.CurrentThemeName}|{(ThemeService.IsDarkMode ? "dark" : "light")}");
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}