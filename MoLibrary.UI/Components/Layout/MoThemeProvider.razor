@using MoLibrary.UI.Services
@inject MoThemeService ThemeService
@inject IJSRuntime JSRuntime
@implements IDisposable

<MudThemeProvider Theme="@ThemeService.CurrentTheme" IsDarkMode="@ThemeService.IsDarkMode" />

<div class="@ThemeService.GetThemeCssClass()" data-theme="@ThemeService.GetThemeDataAttribute()">
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/MoLibrary.UI/js/theme-helper.js").ConfigureAwait(false);
            var themeData = await module.InvokeAsync<string>("getThemeData").ConfigureAwait(false);
            
            await InvokeAsync(() =>
            {
                if (!string.IsNullOrEmpty(themeData))
                {
                    var parts = themeData.Split('|');
                    if (parts.Length == 2)
                    {
                        ThemeService.CurrentThemeName = parts[0];
                        ThemeService.IsDarkMode = parts[1] == "dark";
                    }
                }
            });
            
            // 设置document root的data-theme属性
            await module.InvokeVoidAsync("setDocumentTheme", ThemeService.GetThemeDataAttribute());
        }
    }

    private async void OnThemeChanged()
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/MoLibrary.UI/js/theme-helper.js").ConfigureAwait(false);
        
        // 保存主题偏好到localStorage
        await module.InvokeVoidAsync("saveThemeData", ThemeService.CurrentThemeName, ThemeService.IsDarkMode ? "dark" : "light");
        
        // 设置document root的data-theme属性
        await module.InvokeVoidAsync("setDocumentTheme", ThemeService.GetThemeDataAttribute());
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}