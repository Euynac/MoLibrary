@using Microsoft.Extensions.Options
@using MoLibrary.UI.Modules
@using MoLibrary.UI.UICore
@using MoLibrary.UI.UICore.Interfaces
@using MoLibrary.UI.Services
@using MoLibrary.UI.Components.Layout
@inherits LayoutComponentBase
@inject IUIComponentRegistry UIRegistry
@inject IOptions<ModuleUICoreOption> Options
@inject MoThemeService ThemeService
@implements IDisposable

<MoThemeProvider>
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">@Options.Value.UIAppBarName</MudText>
        <MudSpacer />
        <MoThemeSelector />
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            @foreach (var navItem in UIRegistry.GetNavItems())
            {
                <MudNavLink Href="@navItem.Href" 
                            Icon="@navItem.Icon" 
                            Disabled="@navItem.Disabled">
                    @navItem.Text
                </MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
    </MudLayout>
</MoThemeProvider>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>

@code {
    private bool _drawerOpen = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ThemeService.OnThemeChanged += StateHasChanged;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= StateHasChanged;
    }
}


