@using Microsoft.Extensions.Options
@using MoLibrary.UI.Modules
@using MoLibrary.UI.UICore.Interfaces
@using MoLibrary.UI.Services
@inherits LayoutComponentBase
@inject IUIComponentRegistry UIRegistry
@inject IOptions<ModuleUICoreOption> Options
@inject MoThemeService ThemeService
@implements IDisposable

<MoThemeProvider>
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <div class="mo-main-container @GetMainContainerClass()">
        <!-- 左侧固定导航栏卡片 -->
        <div class="mo-sidebar-container">
            <MudPaper Class="mo-sidebar-card" Elevation="3">
                <MoSidebar @bind-IsExpanded="_sidebarExpanded" />
            </MudPaper>
        </div>
        
        <!-- 右侧内容卡片 -->
        <div class="mo-content-container @GetContentContainerClass()">
            <MudPaper Class="mo-content-card" Elevation="2">
                @Body
            </MudPaper>
        </div>
    </div>
</MoThemeProvider>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _sidebarExpanded = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ThemeService.OnThemeChanged += HandleThemeChanged;
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= HandleThemeChanged;
    }

    private void HandleThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetMainContainerClass()
    {
        return _sidebarExpanded ? "sidebar-expanded" : "sidebar-collapsed";
    }

    private string GetContentContainerClass()
    {
        return _sidebarExpanded ? "content-with-expanded-sidebar" : "content-with-collapsed-sidebar";
    }
}


