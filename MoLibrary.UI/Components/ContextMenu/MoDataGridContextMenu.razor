@typeparam TItem
@using Microsoft.AspNetCore.Components.Web

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

<MoContextMenu @ref="_contextMenu" TItem="TItem" Items="@_menuItems" />

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public Func<TItem, List<ContextMenuItem<TItem>>>? MenuItemsProvider { get; set; }
    [Parameter] public List<ContextMenuItem<TItem>>? DefaultMenuItems { get; set; }

    private MoContextMenu<TItem> _contextMenu = null!;
    private List<ContextMenuItem<TItem>> _menuItems = new();

    /// <summary>
    /// 打开右键菜单
    /// </summary>
    public async Task OpenContextMenu(MouseEventArgs args, TItem item)
    {
        // 根据项目动态生成菜单项
        if (MenuItemsProvider != null)
        {
            _menuItems = MenuItemsProvider(item);
        }
        else if (DefaultMenuItems != null)
        {
            _menuItems = DefaultMenuItems;
        }
        else
        {
            _menuItems = new List<ContextMenuItem<TItem>>();
        }

        await _contextMenu.Open(args, item);
    }

    /// <summary>
    /// 关闭右键菜单
    /// </summary>
    public void CloseContextMenu()
    {
        _contextMenu.Close();
    }
}