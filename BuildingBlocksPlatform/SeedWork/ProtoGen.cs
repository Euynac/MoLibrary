using MediatR;
using ProtoBuf;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

namespace BuildingBlocksPlatform.SeedWork;

public static class ProtoGen
{
    [Conditional("DEBUG")]
    public static void Generate(Assembly assembly)
    {
        var requestTypes = assembly.GetTypes().Where(p => p.GetInterfaces()
            .Any(i => (i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IRequest<>))));
        var responseTypes = assembly.GetTypes().Where(p => p.IsAssignableTo(typeof(IServiceResponse)));
        var dtoTypes = assembly.GetTypes()
            .Where(p => p.Name.EndsWith("DTO") && p.Namespace?.Contains("PublishedLanguages") == true);

        var method = typeof(Serializer).GetMethods().FirstOrDefault(p => p is
        { IsGenericMethod: true, IsPublic: true, IsStatic: true, Name: "GetProto" })
                     ?? throw new ArgumentNullException("GetProto");


        var builder = new StringBuilder();
        builder.AppendLine($"// This file has been generated by {typeof(ProtoGen).Namespace}/ProtoGen.cs");
        builder.AppendLine();

        builder.AppendLine("syntax = \"proto3\";");
        builder.AppendLine();

        builder.AppendLine("// Requests");
        foreach (var type in requestTypes)
        {
            var name = GenerateProtoString(method, builder, type);
        }

        builder.AppendLine();

        builder.AppendLine("// Responses");
        foreach (var type in responseTypes)
        {
            var name = GenerateProtoString(method, builder, type);
        }

        builder.AppendLine("// DTO");
        foreach (var type in dtoTypes)
        {
            var name = GenerateProtoString(method, builder, type);
        }

        var result = builder.ToString();

        WriteToFile(builder, "Protos", $"Protocol.proto");
    }


    private static void WriteToFile(StringBuilder builder, string basePath, string name)
    {
        var path = Path.Combine(basePath, name);
        if (!Directory.Exists(basePath))
        {
            Directory.CreateDirectory(basePath);
        }

        File.WriteAllText(path, builder.ToString());
    }

    private static string GenerateProtoString(MethodInfo method, StringBuilder builder,
        Type type, string? pattern = null, string? replacement = null)
    {
        var genericMethod = method.MakeGenericMethod(type);
        var protoOutput = genericMethod.Invoke(null, Array.Empty<object>())
                          ?? throw new InvalidOperationException("Cannot invoke GetProto method.");
        var protoStr = protoOutput.ToString();
        protoStr = protoStr?[protoStr.IndexOf("message", StringComparison.Ordinal)..] ?? "";
        if (pattern != null && replacement != null)
        {
            protoStr = Regex.Replace(protoStr, pattern, replacement);
        }

        builder.Append(protoStr);

        var name = Regex.Match(protoStr, @"message (\w*) {.*").Groups[1].Value;
        return name;
    }
}