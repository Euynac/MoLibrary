@using MoLibrary.DataChannel.Dashboard.Models
@using MudBlazor
@using System.Text.Json

<MudCard Elevation="2" Style="@GetCardStyle()">
    <MudCardHeader Class="pb-2">
        <CardHeaderContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@GetChannelIcon()" Color="@GetChannelColor()" />
                <MudText Typo="Typo.h6" Style="font-weight: 500;">@Channel.Id</MudText>
                @if (Channel.HasExceptions)
                {
                    <MudChip T="string" Color="Color.Error" Size="Size.Small" Label="true">
                        异常 (@Channel.ExceptionCount)
                    </MudChip>
                }
            </MudStack>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (_isReInitializing)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                    <MudMenuItem OnClick="HandleReInitialize" 
                                Icon="@Icons.Material.Filled.Refresh"
                                Disabled="_isReInitializing">
                        重新初始化
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => OnViewExceptions.InvokeAsync(Channel.Id))" 
                                Icon="@Icons.Material.Filled.ErrorOutline">
                        查看异常
                    </MudMenuItem>
                    @if (Channel.HasExceptions)
                    {
                        <MudMenuItem OnClick="@(() => OnClearExceptions.InvokeAsync(Channel.Id))" 
                                    Icon="@Icons.Material.Filled.Clear">
                            清空异常
                        </MudMenuItem>
                    }
                </MudMenu>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Style="flex: 1; padding-top: 8px;">
        <MudStack Spacing="3">
            <!-- 状态信息 -->
            <MudStack Row="true" Spacing="2">
                <MudChip T="string" Color="@(Channel.IsInitialized ? Color.Success : Color.Secondary)" Size="Size.Small">
                    @(Channel.IsInitialized ? "已初始化" : "未初始化")
                </MudChip>
                @if (Channel.IsInitializing)
                {
                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">
                        初始化中
                    </MudChip>
                }
                @if (Channel.IsNotAvailable)
                {
                    <MudChip T="string" Color="Color.Error" Size="Size.Small">
                        不可用
                    </MudChip>
                }
            </MudStack>

            <!-- 端点信息 -->
            <MudStack Spacing="2">
                <MudText Typo="Typo.subtitle2" Style="font-weight: 500;">端点信息</MudText>
                
                <!-- 内部端点 -->
                <MudExpansionPanels Elevation="0" Dense="true">
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Input" Size="Size.Small" Color="Color.Info" />
                                <MudText Style="color: var(--mud-palette-text-primary);">内部: @Channel.InnerEndpoint.Name</MudText>
                            </MudStack>
                        </TitleContent>
                        <ChildContent>
                            <MetadataDisplay Metadata="Channel.InnerEndpoint.Metadata" />
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

                <!-- 外部端点 -->
                <MudExpansionPanels Elevation="0" Dense="true">
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Output" Size="Size.Small" Color="Color.Success" />
                                <MudText Style="color: var(--mud-palette-text-primary);">外部: @Channel.OuterEndpoint.Name</MudText>
                            </MudStack>
                        </TitleContent>
                        <ChildContent>
                            <MetadataDisplay Metadata="Channel.OuterEndpoint.Metadata" />
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudStack>

            <!-- 中间件信息 -->
            @if (Channel.Middlewares.Any())
            {
                <MudStack Spacing="2">
                    <MudText Typo="Typo.subtitle2" Style="font-weight: 500;">中间件 (@Channel.Middlewares.Count)</MudText>
                    <MudExpansionPanels Elevation="0" Dense="true">
                        @foreach (var middleware in Channel.Middlewares)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@GetComponentIcon(middleware.Type)" Size="Size.Small" Color="Color.Secondary" />
                                        <MudText Style="color: var(--mud-palette-text-primary);">@middleware.Name</MudText>
                                        <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Label="true">
                                            @middleware.Type.ToString()
                                        </MudChip>
                                    </MudStack>
                                </TitleContent>
                                <ChildContent>
                                    <MetadataDisplay Metadata="middleware.Metadata" />
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudStack>
            }

            <!-- 异常信息 -->
            @if (Channel.HasExceptions)
            {
                <MudStack Spacing="2">
                    <MudText Typo="Typo.subtitle2" Style="font-weight: 500; color: #f44336;">异常信息</MudText>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Color="Color.Error" />
                        <MudText Style="color: #666;">当前异常: @Channel.ExceptionCount</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.History" Size="Size.Small" Color="Color.Warning" />
                        <MudText Style="color: #666;">历史异常: @Channel.TotalExceptionCount</MudText>
                    </MudStack>
                </MudStack>
            }
        </MudStack>
    </MudCardContent>
</MudCard>

@code {
    /// <summary>
    /// Channel状态信息
    /// </summary>
    [Parameter] public ChannelStatusInfo Channel { get; set; } = null!;

    /// <summary>
    /// 重新初始化事件
    /// </summary>
    [Parameter] public EventCallback<string> OnReInitialize { get; set; }

    /// <summary>
    /// 查看异常事件
    /// </summary>
    [Parameter] public EventCallback<string> OnViewExceptions { get; set; }

    /// <summary>
    /// 清空异常事件
    /// </summary>
    [Parameter] public EventCallback<string> OnClearExceptions { get; set; }

    /// <summary>
    /// 重新初始化进行中状态
    /// </summary>
    private bool _isReInitializing = false;

    /// <summary>
    /// 处理重新初始化
    /// </summary>
    /// <returns></returns>
    private async Task HandleReInitialize()
    {
        if (_isReInitializing) return;

        _isReInitializing = true;
        StateHasChanged();

        try
        {
            await OnReInitialize.InvokeAsync(Channel.Id);
        }
        finally
        {
            _isReInitializing = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 获取卡片样式
    /// </summary>
    /// <returns></returns>
    private string GetCardStyle()
    {
        var baseStyle = "height: 100%; display: flex; flex-direction: column;";
        if (_isReInitializing)
        {
            baseStyle += " opacity: 0.7;";
        }
        return baseStyle;
    }

    /// <summary>
    /// 获取Channel图标
    /// </summary>
    /// <returns></returns>
    private string GetChannelIcon()
    {
        if (Channel.IsNotAvailable) return Icons.Material.Filled.Cancel;
        if (Channel.HasExceptions) return Icons.Material.Filled.Error;
        if (Channel.IsInitialized) return Icons.Material.Filled.CheckCircle;
        return Icons.Material.Filled.RadioButtonUnchecked;
    }

    /// <summary>
    /// 获取Channel颜色
    /// </summary>
    /// <returns></returns>
    private Color GetChannelColor()
    {
        if (Channel.IsNotAvailable) return Color.Error;
        if (Channel.HasExceptions) return Color.Warning;
        if (Channel.IsInitialized) return Color.Success;
        return Color.Default;
    }

    /// <summary>
    /// 获取组件图标
    /// </summary>
    /// <param name="type">组件类型</param>
    /// <returns></returns>
    private string GetComponentIcon(EPipeComponentType type)
    {
        return type switch
        {
            EPipeComponentType.Endpoint => Icons.Material.Filled.Adjust,
            EPipeComponentType.TransformMiddleware => Icons.Material.Filled.Transform,
            EPipeComponentType.MonitorMiddleware => Icons.Material.Filled.Monitor,
            EPipeComponentType.EndpointMiddleware => Icons.Material.Filled.Router,
            _ => Icons.Material.Filled.Extension
        };
    }


} 