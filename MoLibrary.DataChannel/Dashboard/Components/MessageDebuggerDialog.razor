@using MudBlazor
@using MoLibrary.DataChannel.BuildInMiddlewares
@using System.Timers

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_filterKeyword" 
                                  T="string"
                                  Label="过滤关键字" 
                                  Placeholder="输入要监听的消息内容"
                                  Variant="Variant.Outlined"
                                  Immediate="true"
                                  Disabled="_isListening" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudNumericField @bind-Value="_maxQueueSize" 
                                     T="int"
                                     Label="队列长度" 
                                     Min="1" 
                                     Max="1000"
                                     Variant="Variant.Outlined"
                                     Disabled="_isListening" />
                </MudItem>
                <MudItem xs="12" md="2" Class="d-flex align-center">
                    <MudButton Color="@(_isListening ? Color.Error : Color.Primary)" 
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="ToggleListening">
                        @if (_isListening)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Stop" Class="mr-2" />
                            <text>停止监听</text>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" />
                            <text>开始监听</text>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>

            @if (_isListening)
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                        <MudText>正在监听消息...</MudText>
                        <MudSpacer />
                        <MudText Typo="Typo.body2">已捕获: @_messages.Count 条</MudText>
                    </MudStack>
                </MudAlert>
            }

            <MudPaper Elevation="0" Class="pa-2" Style="border: 1px solid var(--mud-palette-lines-default);">
                <MudStack Spacing="2">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pb-2">
                        <MudText Typo="Typo.h6">捕获的消息</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Primary" 
                                   Size="Size.Small"
                                   OnClick="ClearMessages"
                                   Disabled="@(_messages.Count == 0)">
                            <MudIcon Icon="@Icons.Material.Filled.Clear" Size="Size.Small" Class="mr-1" />
                            清空
                        </MudButton>
                    </MudStack>

                    <MudDivider />

                    @if (_messages.Count == 0)
                    {
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 300px;">
                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body1" Color="Color.Default">暂无捕获的消息</MudText>
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Spacing="2" Style="max-height: 400px; overflow-y: auto;">
                            @foreach (var msg in _messages.OrderByDescending(m => m.Timestamp))
                            {
                                <MudCard Elevation="1">
                                    <MudCardContent Class="pa-3">
                                        <MudStack Spacing="2">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudChip T="string" 
                                                         Size="Size.Small" 
                                                         Color="@(msg.Source == MoLibrary.DataChannel.Pipeline.EDataSource.Inner ? Color.Info : Color.Success)">
                                                    @msg.Source
                                                </MudChip>
                                                <MudText Typo="Typo.caption">@msg.Timestamp.ToString("HH:mm:ss.fff")</MudText>
                                                <MudSpacer />
                                                <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" 
                                                               Size="Size.Small"
                                                               OnClick="() => ToggleMessageExpansion(msg)" />
                                            </MudStack>

                                            <MudText Typo="Typo.body2" Style="word-break: break-all;">
                                                @GetMessagePreview(msg.FormattedContent)
                                            </MudText>

                                            @if (_expandedMessages.Contains(msg))
                                            {
                                                <MudDivider />
                                                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2">
                                                    <MudTabPanel Text="格式化内容">
                                                        <MudPaper Elevation="0" Class="pa-2" Style="background-color: var(--mud-palette-background-grey);">
                                                            <pre style="margin: 0; font-family: monospace; font-size: 0.875rem; overflow-x: auto;">@msg.FormattedContent</pre>
                                                        </MudPaper>
                                                    </MudTabPanel>
                                                    @if (msg.Metadata?.Any() == true)
                                                    {
                                                        <MudTabPanel Text="元数据">
                                                            <MetadataDisplay Metadata="msg.Metadata" />
                                                        </MudTabPanel>
                                                    }
                                                </MudTabs>
                                            }
                                        </MudStack>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">关闭</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference? MudDialog { get; set; }
    [Parameter] public MessageDebuggerMiddleware Middleware { get; set; } = null!;

    private string _filterKeyword = string.Empty;
    private int _maxQueueSize = 100;
    private bool _isListening = false;
    private List<MessageDebuggerMiddleware.DebugMessage> _messages = new();
    private HashSet<MessageDebuggerMiddleware.DebugMessage> _expandedMessages = new();
    private Timer? _refreshTimer;

    protected override void OnInitialized()
    {
        // 初始化值
        _filterKeyword = Middleware.FilterKeyword;
        _maxQueueSize = Middleware.MaxQueueSize;
        _isListening = Middleware.IsActive;
        
        if (_isListening)
        {
            RefreshMessages();
            StartRefreshTimer();
        }
    }

    private void ToggleListening()
    {
        _isListening = !_isListening;

        if (_isListening)
        {
            // 应用设置并开始监听
            Middleware.FilterKeyword = _filterKeyword;
            Middleware.MaxQueueSize = _maxQueueSize;
            Middleware.IsActive = true;
            StartRefreshTimer();
        }
        else
        {
            // 停止监听
            Middleware.IsActive = false;
            StopRefreshTimer();
        }
    }

    private void StartRefreshTimer()
    {
        _refreshTimer?.Dispose();
        _refreshTimer = new Timer(500); // 每500ms刷新一次
        _refreshTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                RefreshMessages();
                StateHasChanged();
            });
        };
        _refreshTimer.Start();
    }

    private void StopRefreshTimer()
    {
        _refreshTimer?.Stop();
        _refreshTimer?.Dispose();
        _refreshTimer = null;
    }

    private void RefreshMessages()
    {
        _messages = Middleware.GetDebugMessages();
    }

    private void ClearMessages()
    {
        Middleware.ClearDebugMessages();
        _messages.Clear();
        _expandedMessages.Clear();
    }

    private void ToggleMessageExpansion(MessageDebuggerMiddleware.DebugMessage message)
    {
        if (_expandedMessages.Contains(message))
        {
            _expandedMessages.Remove(message);
        }
        else
        {
            _expandedMessages.Add(message);
        }
    }

    private string GetMessagePreview(string content)
    {
        if (string.IsNullOrEmpty(content))
        {
            return "(空消息)";
        }

        var firstLine = content.Split('\n').FirstOrDefault() ?? content;
        if (firstLine.Length > 100)
        {
            return firstLine.Substring(0, 100) + "...";
        }
        return firstLine;
    }

    private void Cancel()
    {
        StopRefreshTimer();
        MudDialog?.Close();
    }

    public void Dispose()
    {
        StopRefreshTimer();
    }
}